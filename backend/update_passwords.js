const bcrypt = require('bcryptjs');
const { Pool } = require('pg');
require('dotenv').config();

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  user: process.env.PG_USER,
  host: process.env.PG_HOST,
  database: process.env.PG_DATABASE,
  password: process.env.PG_PASSWORD,
  port: process.env.PG_PORT,
});

async function updatePasswords() {
  try {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π...');
    
    // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –ø–∞—Ä–æ–ª—è–º–∏
    const users = [
      { email: 'admin1@example.com', password: 'adminpass123' },
      { email: 'editor42@example.com', password: 'editorpass456' },
      { email: 'mod@example.com', password: 'modpass789' },
      { email: 'viewer@example.com', password: 'guestpass000' }
    ];

    for (const user of users) {
      // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const saltRounds = 10;
      const hashedPassword = await bcrypt.hash(user.password, saltRounds);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ
      const query = 'UPDATE users SET password_hash = $1 WHERE email = $2';
      await pool.query(query, [hashedPassword, user.email]);
      
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä–æ–ª—å –¥–ª—è ${user.email}`);
    }
    
    console.log('üéâ –í—Å–µ –ø–∞—Ä–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª–µ–π:', error);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
updatePasswords(); 