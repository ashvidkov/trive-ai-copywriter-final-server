"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Yandex Search API
"""

import requests
import base64
import xml.etree.ElementTree as ET
from bs4 import BeautifulSoup
from typing import List, Dict, Optional, Tuple
from yandex_auth import YandexAuthService


class SearchResult:
    def __init__(self, title: str, url: str, snippet: str):
        self.title = title
        self.url = url
        self.snippet = snippet
        
    def to_dict(self) -> Dict:
        return {
            "title": self.title,
            "url": self.url,
            "snippet": self.snippet
        }


class YandexSearchService:
    def __init__(self):
        self.auth_service = YandexAuthService()
    
    def _extract_title_description(self, url: str) -> Tuple[str, str]:
        """–ò–∑–≤–ª–µ—á—å title –∏ description –Ω–∞–ø—Ä—è–º—É—é —Å —Å–∞–π—Ç–∞"""
        try:
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            }
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.content, "html.parser")
            
            title_tag = soup.find("title")
            title = title_tag.text.strip() if title_tag else "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –ø–æ–ª—É—á–µ–Ω, —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
            
            description_tag = soup.find("meta", attrs={"name": "description"})
            description = description_tag["content"].strip() if description_tag and description_tag.get("content") else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ, —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
            
            return title, description
            
        except Exception as e:
            return "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –ø–æ–ª—É—á–µ–Ω, —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ, —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
    
    def search(self, query: str, page_size: int = 10, region: int = 225) -> List[SearchResult]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Yandex Search API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        print(f"üîç –ü–æ–∏—Å–∫: '{query}' | –†–µ–≥–∏–æ–Ω: {region} | –õ–∏–º–∏—Ç: {page_size}")
        iam_token = self.auth_service.get_iam_token()
        
        all_results = []
        max_per_page = 10  # Yandex API –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_requests = (page_size + max_per_page - 1) // max_per_page  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
        
        for page_num in range(total_requests):
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            remaining_results = page_size - len(all_results)
            current_page_size = min(max_per_page, remaining_results)
            
            if current_page_size <= 0:
                break
                
            print(f"üìÑ –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}, —Ä–∞–∑–º–µ—Ä: {current_page_size}")
            
            search_query = {
                "query": {
                    "searchType": 1,
                    "queryText": query,
                    "lr": region  # –ü–∞—Ä–∞–º–µ—Ç—Ä —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
                },
                "pageSize": current_page_size,
                "responseFormat": 0  # XML
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä page –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if page_num > 0:
                search_query["page"] = page_num
        
            headers = {
                "Authorization": f"Bearer {iam_token}",
                "Content-Type": "application/json"
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                "https://searchapi.api.cloud.yandex.net/v2/web/searchAsync",
                headers=headers,
                json=search_query
            )
            
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}: {response.status_code}")
                break
            
            operation_id = response.json()["id"]
            
            # –ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
            import time
            time.sleep(2)
            
            result = requests.get(
                f"https://operation.api.cloud.yandex.net/operations/{operation_id}",
                headers={"Authorization": f"Bearer {iam_token}"}
            )
            
            if result.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}: {result.status_code}")
                break
            
            try:
                raw_base64 = result.json()["response"]["rawData"]
                decoded_xml = base64.b64decode(raw_base64).decode("utf-8")
                root = ET.fromstring(decoded_xml)
                
                page_results = []
                
                for doc in root.findall('.//group/doc'):
                    title = doc.findtext('title') or doc.findtext('headline') or ""
                    url = doc.findtext('url') or "–ë–µ–∑ URL"
                    snippet = doc.findtext('passages/passage') or doc.findtext('headline') or ""
                    
                    # –ï—Å–ª–∏ title –∏–ª–∏ snippet –ø–ª–æ—Ö–∏–µ ‚Äî –ø–∞—Ä—Å–∏–º –≤—Ä—É—á–Ω—É—é —Å —Å–∞–π—Ç–∞
                    if len(title.strip()) < 10 or len(snippet.strip()) < 40:
                        fetched_title, fetched_desc = self._extract_title_description(url)
                        if len(title.strip()) < 10:
                            title = fetched_title
                        if len(snippet.strip()) < 40:
                            snippet = fetched_desc
                    
                    # –ò—Ç–æ–≥–æ–≤–∞—è –∑–∞—â–∏—Ç–∞
                    title = title.strip() or "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
                    snippet = snippet.strip() or "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
                    
                    page_results.append(SearchResult(title, url, snippet))
                
                all_results.extend(page_results)
                print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: –ø–æ–ª—É—á–µ–Ω–æ {len(page_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ–º –æ–∂–∏–¥–∞–ª–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if len(page_results) < current_page_size:
                    print(f"üìÑ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1}")
                    break
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ XML —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}: {str(e)}")
                break
        
        print(f"üìä –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {len(all_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return all_results[:page_size]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ –¥–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞