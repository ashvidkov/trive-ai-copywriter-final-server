import React, { useState, useEffect } from "react";
import Header from "../components/Header";

// Toast-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const Toast = ({ message, type = "success", onClose }) => (
  <div className={`fixed bottom-8 right-8 z-50 px-8 py-5 rounded-2xl shadow-2xl text-lg font-bold transition-all duration-300
    ${type === "save" ? "bg-yellow-400 text-white" : type === "approve" ? "bg-green-500 text-white" : "bg-red-500 text-white"}`}
    style={{ minWidth: 220 }}
  >
    {message}
    <button className="ml-6 text-white/80 hover:text-white text-2xl font-bold" onClick={onClose}>&times;</button>
  </div>
);

const SeoSearchPage = () => {
  const [searchQuery, setSearchQuery] = useState("");
  const [searchRegion, setSearchRegion] = useState(225); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏
  const [searchResultsCount, setSearchResultsCount] = useState(10); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ø-10
  const [searchResults, setSearchResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [selectedResults, setSelectedResults] = useState(new Set());
  const [planGenerationLog, setPlanGenerationLog] = useState("");
  const [articleGenerationLog, setArticleGenerationLog] = useState("");

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const [currentStep, setCurrentStep] = useState(1);
  const [parsedData, setParsedData] = useState([]);
  const [parsingStats, setParsingStats] = useState(null);
  const [cleanedData, setCleanedData] = useState([]);
  const [chunks, setChunks] = useState([]);
  const [finalArticle, setFinalArticle] = useState(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  const [expandedArticles, setExpandedArticles] = useState(new Set());
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞–Ω–∫–∞–º–∏
  const [chunkPriorities, setChunkPriorities] = useState({}); // 'low', 'medium', 'high'
  const [excludedChunks, setExcludedChunks] = useState(new Set());
  const [articlePlan, setArticlePlan] = useState(null);
  const [editablePlan, setEditablePlan] = useState(""); // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –ø–ª–∞–Ω —Å—Ç–∞—Ç—å–∏
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
  const [settings, setSettings] = useState({
    enableCleaning: true,
    chunkSize: 500,
    targetLength: 'medium',
    targetLengthChars: 7000 // –î–ª–∏–Ω–∞ —Å—Ç–∞—Ç—å–∏ –≤ —Å–∏–º–≤–æ–ª–∞—Ö
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const [modelSettings, setModelSettings] = useState({
    system_prompt: "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π SEO-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –ù–∞–ø–∏—à–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –±–æ–ª—å—à–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ–≤ –∏ —Ü–∏—Ñ—Ä. –°–æ–∑–¥–∞–π —Å—Ç–∞—Ç—å—é —Å –≥–ª—É–±–æ–∫–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (H1-H6), –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∞. –§–æ–∫—É—Å –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º SEO –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏.",
    user_prompt: "–ü–µ—Ä–µ–ø–∏—à–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–≤ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–º—ã—Å–ª:",
    temperature: 0.7,
    max_tokens: 2000,
    model: "gpt-4o",
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Å—Ç–∞—Ç—å–∏
    plan_temperature: 0.2,
    plan_max_tokens: 3000,
    plan_system_prompt: "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ü–†–û–ß–ò–¢–ê–¢–¨ –∏ –ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã, –∞ –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —Å—Ç–∞—Ç—å–∏.\n\n–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:\n1. –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ—á–∏—Ç–∞–π –∫–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ\n2. –í–´–î–ï–õ–ò –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã –∏ –ø–æ–¥—Ç–µ–º—ã –≤ –∫–∞–∂–¥–æ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ\n3. –°–û–ó–î–ê–ô –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–û–ì–û —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ\n4. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏\n\n–ó–ê–ü–†–ï–©–ï–ù–û:\n‚ùå \"–í–≤–µ–¥–µ–Ω–∏–µ\", \"–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å\", \"–ó–∞–∫–ª—é—á–µ–Ω–∏–µ\"\n‚ùå \"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã\", \"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ\"\n‚ùå –õ—é–±—ã–µ –æ–±—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ —Å–≤—è–∑–∏ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º\n\n–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:\n‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞\n‚úÖ –°–æ–∑–¥–∞–≤–∞–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ–º\n‚úÖ –£–∫–∞–∑—ã–≤–∞–π –Ω–æ–º–µ—Ä–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞\n\n–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:\n1. [–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞]\n   - –û–ø–∏—Å–∞–Ω–∏–µ: —á—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª\n   - –§—Ä–∞–≥–º–µ–Ω—Ç—ã: –Ω–æ–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —á–∞–Ω–∫–æ–≤\n   \n2. [–°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª]\n   - –û–ø–∏—Å–∞–Ω–∏–µ: ...\n   - –§—Ä–∞–≥–º–µ–Ω—Ç—ã: ...",
    plan_user_prompt: "–ê–ù–ê–õ–ò–ó–ò–†–£–ô —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞–π –ø–ª–∞–Ω —Å—Ç–∞—Ç—å–∏.\n\n–°–ù–ê–ß–ê–õ–ê –ø—Ä–æ—á–∏—Ç–∞–π –∫–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏ –≤—ã–¥–µ–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã.\n\n–°–û–ó–î–ê–ô –ø–ª–∞–Ω —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–û–ì–û —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.\n–ö–∞–∂–¥—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∞–∂–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞.\n\n–ü–†–ò–ú–ï–†–´ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:\n‚úÖ \"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ö–æ–ª–æ–¥–Ω–æ–π –≤—ã—Å–∞–¥–∫–∏ –º–µ—Ç–∏–∑–æ–≤\"\n‚úÖ \"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —ç—Ç–∞–ø—ã –ø—Ä–æ—Ü–µ—Å—Å–∞\"\n‚úÖ \"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞\"\n‚úÖ \"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\"\n‚úÖ \"–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏\"\n\n–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∏–ø–∞ \"–í–≤–µ–¥–µ–Ω–∏–µ\" –∏–ª–∏ \"–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å\"."
  });

  // –ù–æ–≤—ã–µ SEO-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const [seoSettings, setSeoSettings] = useState({
    additionalKeywords: '',
    lsiKeywords: '',
    targetPhrases: '',
    keywordDensity: 2.5,
    seoPrompt: 'üîπ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø SEO-–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –î–õ–Ø –¢–ï–•–ù–ò–ß–ï–°–ö–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê:\n- –°–æ–∑–¥–∞–≤–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏\n- –í–∫–ª—é—á–∞–π —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –∏ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã\n- –î–æ–±–∞–≤–ª—è–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–µ–π—Å—ã, –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n- –í–∫–ª—é—á–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ –∏ —Ç—Ä–µ–Ω–¥—ã —Ä–∞–∑–≤–∏—Ç–∏—è\n- –°–æ–∑–¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é\n- –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n- –í–∫–ª—é—á–∞–π LSI-–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã\n- –î–æ–±–∞–≤–ª—è–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n- –°–æ–∑–¥–∞–≤–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ –ø–æ–∏—Å–∫–æ–≤—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
    writingStyle: 'technical',
    contentType: 'educational',
    targetAudience: 'specialists',
    headingType: 'h2',
    paragraphLength: 'medium',
    useLists: true,
    internalLinks: false
  });
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏
  const [cleaningSettings, setCleaningSettings] = useState({
    mode: 'manual', // 'automatic' –∏–ª–∏ 'manual' - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º
    removeTechnicalBlocks: true,
    removeDuplicates: true,
    filterRelevance: true,
    minParagraphLength: 50,
    maxParagraphLength: 2000,
    relevanceThreshold: 0.7
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
  const [editableContent, setEditableContent] = useState({});
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  const [originalContent, setOriginalContent] = useState({});
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —ç—Ç–∞–ø–∞—Ö
  const [hasChanges, setHasChanges] = useState({
    search: false,
    parse: false,
    clean: false,
    chunk: false,
    generate: false
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const [savedSearchResults, setSavedSearchResults] = useState([]);
  const [savedParsedData, setSavedParsedData] = useState([]);
  const [savedCleanedData, setSavedCleanedData] = useState([]);
  const [savedChunks, setSavedChunks] = useState([]);
  const [savedExcludedArticles, setSavedExcludedArticles] = useState(new Set());
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const [manualContentMode, setManualContentMode] = useState({}); // {url: true/false}
  const [manualContent, setManualContent] = useState({}); // {url: content}
  const [manualContentTitle, setManualContentTitle] = useState({}); // {url: title}
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π (—Ö—Ä–∞–Ω–∏–º URL –≤–º–µ—Å—Ç–æ –∏–Ω–¥–µ–∫—Å–æ–≤)
  const [excludedArticles, setExcludedArticles] = useState(new Set());

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
  const [themes, setThemes] = useState([]);
  const [themeIds, setThemeIds] = useState([]);
  const [savingToDb, setSavingToDb] = useState(false);
  const [toast, setToast] = useState(null);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è SEO-–ø—Ä–æ–≤–µ—Ä–∫–∏ text.ru
  const [seoQualityData, setSeoQualityData] = useState(null);
  const [isCheckingSeo, setIsCheckingSeo] = useState(false);
  const [seoCheckError, setSeoCheckError] = useState(null);
  const [showSeoBlock, setShowSeoBlock] = useState(false);

  const steps = [
    { id: 1, title: '–ü–æ–∏—Å–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤', icon: 'üîç' },
    { id: 2, title: '–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', icon: 'üìÑ' },
    { id: 3, title: '–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞', icon: 'üßπ' },
    { id: 4, title: '–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏', icon: 'üî™' },
    { id: 5, title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', icon: '‚öôÔ∏è' },
    { id: 6, title: '–†–µ–∑—É–ª—å—Ç–∞—Ç', icon: 'üìù' }
  ];

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
  let user = null;
  try {
    user = JSON.parse(localStorage.getItem("user"));
  } catch {}
  const username = user?.login || "user";
  const role = user?.role || "user";

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
  const saveToLocalStorage = (key, data) => {
    try {
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è localStorage
      const dataString = JSON.stringify(data);
      if (dataString.length > 5000000) { // 5MB –ª–∏–º–∏—Ç
        console.warn(`–î–∞–Ω–Ω—ã–µ –¥–ª—è ${key} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ (${dataString.length} –±–∞–π—Ç), –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º`);
        return;
      }
      localStorage.setItem(`seo_project_${key}`, dataString);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', error);
      // –û—á–∏—â–∞–µ–º localStorage –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω
      if (error.name === 'QuotaExceededError') {
        try {
          localStorage.clear();
          console.log('localStorage –æ—á–∏—â–µ–Ω –∏–∑-–∑–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è');
        } catch (clearError) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å localStorage:', clearError);
        }
      }
    }
  };

  const loadFromLocalStorage = (key, defaultValue) => {
    try {
      const saved = localStorage.getItem(`seo_project_${key}`);
      return saved ? JSON.parse(saved) : defaultValue;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', error);
      return defaultValue;
    }
  };

  const clearLocalStorage = () => {
    try {
      Object.keys(localStorage).forEach(key => {
        if (key.startsWith('seo_project_')) {
          localStorage.removeItem(key);
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ localStorage:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const savedSearchQuery = loadFromLocalStorage('searchQuery', '');
    const savedSearchRegion = loadFromLocalStorage('searchRegion', 225);
    const savedSearchResultsCount = loadFromLocalStorage('searchResultsCount', 10);
    const savedCurrentStep = loadFromLocalStorage('currentStep', 1);
    const savedSearchResults = loadFromLocalStorage('searchResults', []);
    const savedSelectedResults = loadFromLocalStorage('selectedResults', new Set());
    const savedParsedData = loadFromLocalStorage('parsedData', []);
    const savedCleanedData = loadFromLocalStorage('cleanedData', []);
    const savedChunks = loadFromLocalStorage('chunks', []);
    const savedFinalArticle = loadFromLocalStorage('finalArticle', null);
    const savedArticlePlan = loadFromLocalStorage('articlePlan', null);
    const savedEditablePlan = loadFromLocalStorage('editablePlan', '');
    const savedSettings = loadFromLocalStorage('settings', {
      enableCleaning: true,
      chunkSize: 500,
      targetLength: 'medium',
      targetLengthChars: 7000
    });
    const savedModelSettings = loadFromLocalStorage('modelSettings', {
      system_prompt: "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π SEO-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –ù–∞–ø–∏—à–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –±–æ–ª—å—à–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ–≤ –∏ —Ü–∏—Ñ—Ä. –°–æ–∑–¥–∞–π —Å—Ç–∞—Ç—å—é —Å –≥–ª—É–±–æ–∫–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (H1-H6), –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∞. –§–æ–∫—É—Å –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º SEO –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏.",
      user_prompt: "–ü–µ—Ä–µ–ø–∏—à–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–≤ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–º—ã—Å–ª:",
      temperature: 0.7,
      max_tokens: 2000,
      model: "gpt-4o",
      plan_temperature: 0.2,
      plan_max_tokens: 3000,
      plan_system_prompt: "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ü–†–û–ß–ò–¢–ê–¢–¨ –∏ –ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–û–í–ê–¢–¨ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã, –∞ –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —Å—Ç–∞—Ç—å–∏.\n\n–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:\n1. –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ—á–∏—Ç–∞–π –∫–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ\n2. –í–´–î–ï–õ–ò –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã –∏ –ø–æ–¥—Ç–µ–º—ã –≤ –∫–∞–∂–¥–æ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ\n3. –°–û–ó–î–ê–ô –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–û–ì–û —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ\n4. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏\n\n–ó–ê–ü–†–ï–©–ï–ù–û:\n‚ùå \"–í–≤–µ–¥–µ–Ω–∏–µ\", \"–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å\", \"–ó–∞–∫–ª—é—á–µ–Ω–∏–µ\"\n‚ùå \"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã\", \"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ\"\n‚ùå –õ—é–±—ã–µ –æ–±—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ —Å–≤—è–∑–∏ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º\n\n–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:\n‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞\n‚úÖ –°–æ–∑–¥–∞–≤–∞–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ–º\n‚úÖ –£–∫–∞–∑—ã–≤–∞–π –Ω–æ–º–µ—Ä–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞\n\n–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:\n1. [–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞]\n   - –û–ø–∏—Å–∞–Ω–∏–µ: —á—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª\n   - –§—Ä–∞–≥–º–µ–Ω—Ç—ã: –Ω–æ–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —á–∞–Ω–∫–æ–≤\n   \n2. [–°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª]\n   - –û–ø–∏—Å–∞–Ω–∏–µ: ...\n   - –§—Ä–∞–≥–º–µ–Ω—Ç—ã: ...",
      plan_user_prompt: "–ê–ù–ê–õ–ò–ó–ò–†–£–ô —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞–π –ø–ª–∞–Ω —Å—Ç–∞—Ç—å–∏.\n\n–°–ù–ê–ß–ê–õ–ê –ø—Ä–æ—á–∏—Ç–∞–π –∫–∞–∂–¥—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏ –≤—ã–¥–µ–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã.\n\n–°–û–ó–î–ê–ô –ø–ª–∞–Ω —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–û–ì–û —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.\n–ö–∞–∂–¥—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∞–∂–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É –∏–∑ —Ç–µ–∫—Å—Ç–∞.\n\n–ü–†–ò–ú–ï–†–´ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:\n‚úÖ \"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —Ö–æ–ª–æ–¥–Ω–æ–π –≤—ã—Å–∞–¥–∫–∏ –º–µ—Ç–∏–∑–æ–≤\"\n‚úÖ \"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —ç—Ç–∞–ø—ã –ø—Ä–æ—Ü–µ—Å—Å–∞\"\n‚úÖ \"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞\"\n‚úÖ \"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\"\n‚úÖ \"–ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏\"\n\n–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∏–ø–∞ \"–í–≤–µ–¥–µ–Ω–∏–µ\" –∏–ª–∏ \"–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å\"."
    });
    const savedSeoSettings = loadFromLocalStorage('seoSettings', {
      additionalKeywords: '',
      lsiKeywords: '',
      targetPhrases: '',
      keywordDensity: 2.5,
      seoPrompt: 'üîπ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø SEO-–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –î–õ–Ø –¢–ï–•–ù–ò–ß–ï–°–ö–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê:\n- –°–æ–∑–¥–∞–≤–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º–∏\n- –í–∫–ª—é—á–∞–π —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n- –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –∏ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã\n- –î–æ–±–∞–≤–ª—è–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∫–µ–π—Å—ã, –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n- –í–∫–ª—é—á–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ –∏ —Ç—Ä–µ–Ω–¥—ã —Ä–∞–∑–≤–∏—Ç–∏—è\n- –°–æ–∑–¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é\n- –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n- –í–∫–ª—é—á–∞–π LSI-–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã\n- –î–æ–±–∞–≤–ª—è–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n- –°–æ–∑–¥–∞–≤–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ –ø–æ–∏—Å–∫–æ–≤—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      writingStyle: 'technical',
      contentType: 'educational',
      targetAudience: 'specialists',
      headingType: 'h2',
      paragraphLength: 'medium',
      useLists: true,
      internalLinks: false
    });
    const savedCleaningSettings = loadFromLocalStorage('cleaningSettings', {
      mode: 'manual',
      removeTechnicalBlocks: true,
      removeDuplicates: true,
      filterRelevance: true,
      minParagraphLength: 50,
      maxParagraphLength: 2000,
      relevanceThreshold: 0.7
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ SEO-–¥–∞–Ω–Ω—ã—Ö
    const savedSeoQualityData = loadFromLocalStorage('seoQualityData', null);
    const savedShowSeoBlock = loadFromLocalStorage('showSeoBlock', false);

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (savedSearchQuery) setSearchQuery(savedSearchQuery);
    if (savedSearchRegion) setSearchRegion(savedSearchRegion);
    if (savedSearchResultsCount) setSearchResultsCount(savedSearchResultsCount);
    if (savedCurrentStep) setCurrentStep(savedCurrentStep);
    if (savedSearchResults.length > 0) setSearchResults(savedSearchResults);
    if (savedSelectedResults.size > 0) setSelectedResults(new Set(savedSelectedResults));
    if (savedParsedData.length > 0) setParsedData(savedParsedData);
    if (savedCleanedData.length > 0) setCleanedData(savedCleanedData);
    if (savedChunks.length > 0) setChunks(savedChunks);
    if (savedFinalArticle) setFinalArticle(savedFinalArticle);
    if (savedArticlePlan) setArticlePlan(savedArticlePlan);
    if (savedEditablePlan) setEditablePlan(savedEditablePlan);
    if (savedSettings) setSettings(savedSettings);
    if (savedModelSettings) setModelSettings(savedModelSettings);
    if (savedSeoSettings) setSeoSettings(savedSeoSettings);
    if (savedCleaningSettings) setCleaningSettings(savedCleaningSettings);
    if (savedSeoQualityData) setSeoQualityData(savedSeoQualityData);
    if (savedShowSeoBlock) setShowSeoBlock(savedShowSeoBlock);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º–∞—Ç–∏–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–µ–∫–µ–Ω–¥–∞
    fetch("/api/themes")
      .then(res => res.json())
      .then(data => setThemes(data))
      .catch(() => setThemes([]));
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
  useEffect(() => {
    saveToLocalStorage('searchQuery', searchQuery);
  }, [searchQuery]);

  useEffect(() => {
    saveToLocalStorage('searchRegion', searchRegion);
  }, [searchRegion]);

  useEffect(() => {
    saveToLocalStorage('searchResultsCount', searchResultsCount);
  }, [searchResultsCount]);

  useEffect(() => {
    saveToLocalStorage('currentStep', currentStep);
  }, [currentStep]);

  useEffect(() => {
    saveToLocalStorage('searchResults', searchResults);
  }, [searchResults]);

  useEffect(() => {
    saveToLocalStorage('selectedResults', Array.from(selectedResults));
  }, [selectedResults]);

  useEffect(() => {
    saveToLocalStorage('parsedData', parsedData);
  }, [parsedData]);

  useEffect(() => {
    saveToLocalStorage('cleanedData', cleanedData);
  }, [cleanedData]);

  useEffect(() => {
    saveToLocalStorage('chunks', chunks);
  }, [chunks]);

  useEffect(() => {
    saveToLocalStorage('finalArticle', finalArticle);
  }, [finalArticle]);

  useEffect(() => {
    saveToLocalStorage('articlePlan', articlePlan);
  }, [articlePlan]);

  useEffect(() => {
    saveToLocalStorage('editablePlan', editablePlan);
  }, [editablePlan]);

  useEffect(() => {
    saveToLocalStorage('settings', settings);
  }, [settings]);

  useEffect(() => {
    saveToLocalStorage('modelSettings', modelSettings);
  }, [modelSettings]);

  useEffect(() => {
    saveToLocalStorage('seoSettings', seoSettings);
  }, [seoSettings]);

  useEffect(() => {
    saveToLocalStorage('cleaningSettings', cleaningSettings);
  }, [cleaningSettings]);

  useEffect(() => {
    saveToLocalStorage('seoQualityData', seoQualityData);
  }, [seoQualityData]);

  useEffect(() => {
    saveToLocalStorage('showSeoBlock', showSeoBlock);
  }, [showSeoBlock]);

  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      setError("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å");
      return;
    }

    setLoading(true);
    setError("");
    setSearchResults([]);
    setSelectedResults(new Set());
    setExcludedArticles(new Set()); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
    setCleanedData([]); // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—á–∏—Å—Ç–∫–∏
    setParsedData([]); // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    setChunks([]); // –û—á–∏—â–∞–µ–º —á–∞–Ω–∫–∏
    setFinalArticle(null); // –û—á–∏—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é
    setArticlePlan(null); // –û—á–∏—â–∞–µ–º –ø–ª–∞–Ω —Å—Ç–∞—Ç—å–∏
    setEditablePlan(''); // –û—á–∏—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –ø–ª–∞–Ω
    setSeoQualityData(null); // –û—á–∏—â–∞–µ–º SEO-–¥–∞–Ω–Ω—ã–µ
    setShowSeoBlock(false); // –°–∫—Ä—ã–≤–∞–µ–º SEO-–±–ª–æ–∫
    setSeoCheckError(null); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ SEO
    setCurrentStep(1); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —ç—Ç–∞–ø—É
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ
    setHasChanges({
      search: false,
      parse: false,
      clean: false,
      chunk: false,
      generate: false
    });

    // –û—á–∏—â–∞–µ–º localStorage –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ
    clearLocalStorage();

    try {
      const response = await fetch("https://tkmetizi.ru/ai-api/seo/seo/search", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          query: searchQuery,
          page_size: searchResultsCount,
          region: searchRegion
        })
      });

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${response.status}`);
      }

      const data = await response.json();
      setSearchResults(data.results || []);
      
    } catch (err) {
      setError(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${err.message}`);
      console.error("Search error:", err);
    } finally {
      setLoading(false);
    }
  };

  const handleResultSelect = (index) => {
    const newSelected = new Set(selectedResults);
    if (newSelected.has(index)) {
      newSelected.delete(index);
    } else {
      newSelected.add(index);
    }
    setSelectedResults(newSelected);
    // –û—Ç–º–µ—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–∏—Å–∫–µ
    setHasChanges(prev => ({ ...prev, search: true }));
  };

  const handleSelectAll = () => {
    if (selectedResults.size === searchResults.length) {
      setSelectedResults(new Set());
    } else {
      setSelectedResults(new Set(searchResults.map((_, index) => index)));
    }
    // –û—Ç–º–µ—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–∏—Å–∫–µ
    setHasChanges(prev => ({ ...prev, search: true }));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
  const handleToggleArticle = (articleIndex) => {
    const newExpanded = new Set(expandedArticles);
    if (newExpanded.has(articleIndex)) {
      newExpanded.delete(articleIndex);
    } else {
      newExpanded.add(articleIndex);
    }
    setExpandedArticles(newExpanded);
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞–Ω–∫–∞–º–∏
  const handleChunkPriority = (chunkIndex, priority) => {
    setChunkPriorities(prev => ({
      ...prev,
      [chunkIndex]: priority
    }));
    // –û—Ç–º–µ—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —á–∞–Ω–∫–∞—Ö
    setHasChanges(prev => ({ ...prev, chunk: true }));
  };

  const handleToggleChunkExclusion = (chunkIndex) => {
    const newExcluded = new Set(excludedChunks);
    if (newExcluded.has(chunkIndex)) {
      newExcluded.delete(chunkIndex);
    } else {
      newExcluded.add(chunkIndex);
    }
    setExcludedChunks(newExcluded);
    // –û—Ç–º–µ—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —á–∞–Ω–∫–∞—Ö
    setHasChanges(prev => ({ ...prev, chunk: true }));
  };

  const getChunkPriority = (chunkIndex) => {
    return chunkPriorities[chunkIndex] || 'medium';
  };

  const isChunkExcluded = (chunkIndex) => {
    return excludedChunks.has(chunkIndex);
  };

  // –≠—Ç–∞–ø 2: –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö URL
  const handleParse = async () => {
    const selectedUrls = Array.from(selectedResults).map(index => searchResults[index].url);
    
    if (selectedUrls.length === 0) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞');
      return;
    }

    setLoading(true);
    setError('');
    try {
      const response = await fetch('https://tkmetizi.ru/ai-api/seo/seo/parse', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          urls: selectedUrls,
          delay: 1.0,
          enable_cleaning: false, // –ü–æ–∫–∞ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏
          enable_chunking: false
        })
      });
      
      const data = await response.json();
      setParsedData(data.parsed_articles || []);
      setCleanedData([]); // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ
      setParsingStats({
        total_requested: data.total_requested,
        total_parsed: data.total_parsed,
        total_failed: data.total_failed,
        success_rate: data.success_rate,
        failed_urls: data.failed_urls || []
      });
      handleStepChange(2);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ' + error.message);
    }
    setLoading(false);
  };

  // –≠—Ç–∞–ø 3: –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const handleClean = async () => {
    setLoading(true);
    setError('');
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ–∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ) —Å—Ç–∞—Ç—å–∏
      const filteredArticles = getFilteredArticles();
      

      
      if (cleaningSettings.mode === 'manual') {
        // –í —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        const cleanedArticles = filteredArticles.map((article) => {
          // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç–∞—Ç—å–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –º–∞—Å—Å–∏–≤–µ parsedData
          const originalIndex = parsedData.findIndex(a => a.url === article.url);
          return {
            ...article,
            content: originalContent[originalIndex] || editableContent[originalIndex] || article.content,
            cleaned_content: originalContent[originalIndex] || editableContent[originalIndex] || article.content,
            cleaned_word_count: (originalContent[originalIndex] || editableContent[originalIndex]) ? 
              (originalContent[originalIndex] || editableContent[originalIndex]).split(/\s+/).filter(word => word.length > 0).length : 
              article.word_count
          };
        });
        setCleanedData(cleanedArticles);
        handleStepChange(3);
      } else {
        // –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        const cleanedArticles = filteredArticles.map((article) => {
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
          // –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ
          return {
            ...article,
            cleaned_content: article.content,
            cleaned_word_count: article.word_count
          };
        });
        setCleanedData(cleanedArticles);
        handleStepChange(3);
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ' + error.message);
    }
    setLoading(false);
  };

  // –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–æ–≤
  const handleChunk = async () => {
    setLoading(true);
    setError('');
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ–∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ) —Å—Ç–∞—Ç—å–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–æ–≤
      const allChunks = [];
      let chunkIndex = 0;
      
      cleanedData.forEach((article, articleIndex) => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        if (excludedArticles.has(article.url)) {
          return;
        }
        
        const content = article.cleaned_content || article.content;
        const words = content.split(/\s+/).filter(word => word.length > 0);
        const chunkSize = settings.chunkSize || 500;
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ —Å–ª–æ–≤–∞–º
        for (let i = 0; i < words.length; i += chunkSize) {
          const chunkWords = words.slice(i, i + chunkSize);
          const chunkText = chunkWords.join(' ');
          
          allChunks.push({
            text: chunkText,
            word_count: chunkWords.length,
            article_index: articleIndex,
            article_title: article.title,
            keywords: [] // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
          });
          chunkIndex++;
        }
      });
      
      setChunks(allChunks);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –∫–∞–∫ 'medium'
      const initialPriorities = {};
      allChunks.forEach((_, index) => {
        initialPriorities[index] = 'medium';
      });
      setChunkPriorities(initialPriorities);
      
              handleStepChange(4);
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ —á–∞–Ω–∫–∏–Ω–≥–∞: ' + error.message);
    }
    setLoading(false);
  };

  // –≠—Ç–∞–ø 5: GPT –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
  const handleGenerate = async () => {
    setLoading(true);
    setError('');
    setArticleGenerationLog("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞");
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
      const response = await fetch('https://tkmetizi.ru/ai-api/seo/seo/generate-from-plan-stream', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          plan_text: editablePlan,
          keywords: searchQuery.split(' ').slice(0, 5), // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ –∫–ª—é—á–µ–≤—ã–µ
          target_length_chars: settings.targetLengthChars,
          system_prompt: modelSettings.system_prompt,
          temperature: modelSettings.temperature,
          // –ù–æ–≤—ã–µ SEO-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
          additional_keywords: seoSettings.additionalKeywords,
          lsi_keywords: seoSettings.lsiKeywords,
          target_phrases: seoSettings.targetPhrases,
          keyword_density: seoSettings.keywordDensity,
          seo_prompt: seoSettings.seoPrompt,
          writing_style: seoSettings.writingStyle,
          content_type: seoSettings.contentType,
          target_audience: seoSettings.targetAudience,
          heading_type: seoSettings.headingType,
          paragraph_length: seoSettings.paragraphLength,
          use_lists: seoSettings.useLists,
          internal_links: seoSettings.internalLinks
        })
      });
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const reader = response.body.getReader();
      const decoder = new TextDecoder();
      
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        
        const chunk = decoder.decode(value);
        const lines = chunk.split('\n');
        
        for (const line of lines) {
          if (line.startsWith('data: ')) {
            try {
              const data = JSON.parse(line.slice(6));
              
              if (data.log) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                setArticleGenerationLog(data.log);
              } else if (data.result) {
                // –ü–æ–ª—É—á–∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                setFinalArticle(data.result);
                handleStepChange(6); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
              } else if (data.error) {
                // –ü–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É
                throw new Error(data.error);
              }
            } catch (parseError) {
              console.warn("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SSE –¥–∞–Ω–Ω—ã—Ö:", parseError);
            }
          }
        }
      }
    } catch (error) {
      setError('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ' + error.message);
    } finally {
      setLoading(false);
      setArticleGenerationLog("");
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –ø–æ–ª–µ–π –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤
  const truncateField = (field, maxLength = 255) => {
    if (!field) return field;
    return field.length > maxLength ? field.substring(0, maxLength) : field;
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  const handleSaveToDatabase = async () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è: title, result, —Ç–µ–º–∞—Ç–∏–∫–∏
    if (!finalArticle.title?.trim() || !finalArticle.content?.trim() || themeIds.length === 0) {
      setToast({ message: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º–∞—Ç–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", type: "error" });
      setTimeout(() => setToast(null), 4000);
      return;
    }
    
    setSavingToDb(true);
    try {
      const status = "draft";
      
      // –û–±—Ä–µ–∑–∞–µ–º –ø–æ–ª—è –¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ë–î
      const truncatedData = {
        title: truncateField(finalArticle.title),
        h1: truncateField(finalArticle.h1),
        meta_description: truncateField(finalArticle.meta_description),
        keywords: truncateField(finalArticle.keywords),
        content: "–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –ø–æ–º–æ—â—å—é AI SEO-–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞",
        result: finalArticle.content, // result –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º
        status,
        themeIds: themeIds,
        source: "seo_copywriter"
      };
      
      const res = await fetch("/api/texts", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("token")}`
        },
        body: JSON.stringify(truncatedData)
      });
      
      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: " + (await res.text()));
      
      const data = await res.json();
      setToast({ message: "–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞ AI SEO-–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ", type: "approve" });
      setTimeout(() => setToast(null), 4000);
      
      // –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      console.log("–°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID:", data.id);
    } catch (e) {
      setToast({ message: e.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏", type: "error" });
      setTimeout(() => setToast(null), 5000);
    } finally {
      setSavingToDb(false);
    }
  };

  // –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ (–∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å)
  const handleGenerateArticle = () => {
    // –ù–∞ —ç—Ç–∞–ø–µ 1 "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã" –æ–∑–Ω–∞—á–∞–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥
    if (currentStep === 1) {
      handleParse();
    } else {
      // –ù–∞ –¥—Ä—É–≥–∏—Ö —ç—Ç–∞–ø–∞—Ö - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏
      handleGenerate();
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const saveCurrentData = () => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞
    switch (currentStep) {
      case 1:
        setSavedSearchResults([...searchResults]);
        setHasChanges(prev => ({ ...prev, search: false }));
        break;
      case 2:
        setSavedParsedData([...parsedData]);
        setSavedExcludedArticles(new Set(excludedArticles));
        setHasChanges(prev => ({ ...prev, parse: false }));
        break;
      case 3:
        setSavedCleanedData([...cleanedData]);
        setHasChanges(prev => ({ ...prev, clean: false }));
        break;
      case 4:
        setSavedChunks([...chunks]);
        setHasChanges(prev => ({ ...prev, chunk: false }));
        break;
    }
  };

  const restoreData = () => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–∞–ø–∞
    switch (currentStep) {
      case 1:
        setSearchResults([...savedSearchResults]);
        setSelectedResults(new Set());
        setHasChanges(prev => ({ ...prev, search: false }));
        break;
      case 2:
        setParsedData([...savedParsedData]);
        setExcludedArticles(new Set(savedExcludedArticles));
        setHasChanges(prev => ({ ...prev, parse: false }));
        break;
      case 3:
        setCleanedData([...savedCleanedData]);
        setHasChanges(prev => ({ ...prev, clean: false }));
        break;
      case 4:
        setChunks([...savedChunks]);
        setHasChanges(prev => ({ ...prev, chunk: false }));
        break;
    }
  };

  const handleStepChange = (newStep) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    if (hasChanges.search || hasChanges.parse || hasChanges.clean || hasChanges.chunk) {
      saveCurrentData();
    }
    
    // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–π —ç—Ç–∞–ø —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    if (newStep > currentStep) {
      saveToLocalStorage('searchResults', searchResults);
      saveToLocalStorage('selectedResults', Array.from(selectedResults));
      saveToLocalStorage('parsedData', parsedData);
      saveToLocalStorage('cleanedData', cleanedData);
      saveToLocalStorage('chunks', chunks);
      saveToLocalStorage('finalArticle', finalArticle);
      saveToLocalStorage('articlePlan', articlePlan);
      saveToLocalStorage('editablePlan', editablePlan);
    }
    
    // –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —ç—Ç–∞–ø–∞
    setPlanGenerationLog("");
    setArticleGenerationLog("");
    
    setCurrentStep(newStep);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—á–∏—Å—Ç–∫–∏ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const updateCleaningSettings = (updates) => {
    setCleaningSettings(prev => ({ ...prev, ...updates }));
    setHasChanges(prev => ({ ...prev, clean: true }));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SEO-–Ω–∞—Å—Ç—Ä–æ–µ–∫
  const updateSeoSettings = (updates) => {
    setSeoSettings(prev => ({ ...prev, ...updates }));
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä—É—á–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
  const toggleManualContent = (url) => {
    setManualContentMode(prev => ({
      ...prev,
      [url]: !prev[url]
    }));
  };

  const saveManualContent = (url) => {
    const content = manualContent[url] || '';
    const title = manualContentTitle[url] || '–†—É—á–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç';
    
    if (content.trim()) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å—Ç–∞—Ç—å–∏
      const newArticle = {
        url: url,
        title: title,
        content: content,
        cleaned_content: content,
        meta_description: '',
        word_count: content.split(/\s+/).filter(word => word.length > 0).length,
        cleaned_word_count: content.split(/\s+/).filter(word => word.length > 0).length,
        content_stats: {
          paragraphs: content.split('\n\n').length,
          sentences: content.split(/[.!?]+/).length - 1
        },
        chunks: []
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º
      setParsedData(prev => [...prev, newArticle]);
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
      setParsingStats(prev => ({
        ...prev,
        failed_urls: prev.failed_urls.filter(failed => failed.url !== url)
      }));
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setManualContentMode(prev => ({
        ...prev,
        [url]: false
      }));
      
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ URL
      setManualContent(prev => {
        const newState = { ...prev };
        delete newState[url];
        return newState;
      });
      setManualContentTitle(prev => {
        const newState = { ...prev };
        delete newState[url];
        return newState;
      });
      
      // –û—Ç–º–µ—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      setHasChanges(prev => ({ ...prev, parse: true }));
    }
  };

  const cancelManualContent = (url) => {
    setManualContentMode(prev => ({
      ...prev,
      [url]: false
    }));
    setManualContent(prev => {
      const newState = { ...prev };
      delete newState[url];
      return newState;
    });
    setManualContentTitle(prev => {
      const newState = { ...prev };
      delete newState[url];
      return newState;
    });
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å—è–º–∏
  const handleExcludeArticle = (index) => {
    const articleUrl = parsedData[index]?.url;
    if (articleUrl) {
      setExcludedArticles(prev => new Set([...prev, articleUrl]));
      setHasChanges(prev => ({ ...prev, parse: true }));
      // –û—á–∏—â–∞–µ–º cleanedData –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
      setCleanedData([]);
    }
  };

  const handleRestoreArticle = (index) => {
    const articleUrl = parsedData[index]?.url;
    if (articleUrl) {
      setExcludedArticles(prev => {
        const newSet = new Set(prev);
        newSet.delete(articleUrl);
        return newSet;
      });
      setHasChanges(prev => ({ ...prev, parse: true }));
      // –û—á–∏—â–∞–µ–º cleanedData –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
      setCleanedData([]);
    }
  };

  const getFilteredArticles = () => {
    return parsedData.filter(article => !excludedArticles.has(article.url));
  };

  const handleGeneratePlan = async () => {
    setLoading(true);
    setPlanGenerationLog("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Å—Ç–∞—Ç—å–∏ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π");
    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —á–∞–Ω–∫–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const chunksWithPriorities = chunks.map((chunk, index) => ({
        text: chunk.text,
        word_count: chunk.word_count,
        article_index: 0, // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        article_title: "–°—Ç–∞—Ç—å—è", // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        keywords: chunk.keywords || [],
        priority: getChunkPriority(index),
        excluded: isChunkExcluded(index)
      })).filter(chunk => !chunk.excluded);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
      const response = await fetch("https://tkmetizi.ru/ai-api/seo/seo/generate-plan-stream", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chunks_with_priorities: chunksWithPriorities,
          model_settings: {
            temperature: modelSettings.plan_temperature,
            max_tokens: modelSettings.plan_max_tokens,
            system_prompt: modelSettings.plan_system_prompt,
            user_prompt: modelSettings.plan_user_prompt
          }
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      const reader = response.body.getReader();
      const decoder = new TextDecoder();

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        const chunk = decoder.decode(value);
        const lines = chunk.split('\n');

        for (const line of lines) {
          if (line.startsWith('data: ')) {
            try {
              const data = JSON.parse(line.slice(6));
              
              if (data.log) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                setPlanGenerationLog(data.log);
              } else if (data.result) {
                // –ü–æ–ª—É—á–∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                setArticlePlan(data.result);
                setEditablePlan(data.result.plan_text);
                handleStepChange(5); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
              } else if (data.error) {
                // –ü–æ–ª—É—á–∏–ª–∏ –æ—à–∏–±–∫—É
                throw new Error(data.error);
              }
            } catch (parseError) {
              console.warn("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SSE –¥–∞–Ω–Ω—ã—Ö:", parseError);
            }
          }
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞:", error);
      setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Å—Ç–∞—Ç—å–∏");
    } finally {
      setLoading(false);
      setPlanGenerationLog("");
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SEO-–∫–∞—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ text.ru API
  const handleCheckSeoQuality = async () => {
    if (!finalArticle?.content) {
      setError("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SEO");
      return;
    }

    setIsCheckingSeo(true);
    setSeoCheckError(null);
    setShowSeoBlock(true);

    try {
      const response = await fetch('https://tkmetizi.ru/ai-api/seo/seo/check-seo-quality', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text: finalArticle.content,
          max_wait_time: 120
        })
      });

      const data = await response.json();

      if (response.ok) {
        setSeoQualityData(data);
        setToast({ message: "‚úÖ SEO-–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", type: "success" });
      } else {
        setSeoCheckError(data.error_desc || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SEO");
        setToast({ message: `‚ùå ${data.error_desc || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SEO"}`, type: "error" });
      }
    } catch (error) {
      setSeoCheckError("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
      setToast({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º", type: "error" });
    } finally {
      setIsCheckingSeo(false);
    }
  };

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      <Header username={username} role={role} />
      
      <div className="flex-1 overflow-y-auto">
        <div className="max-w-6xl mx-auto p-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥—É–ª—è */}
        <div className="mb-8">
          <h1 className="text-4xl font-extrabold text-primary mb-2">SEO Copywriter</h1>
          <p className="text-xl text-gray-600">–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</p>
        </div>

        {/* –§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ */}
        <div className="bg-white rounded-xl shadow-md p-5 mb-6">
          <h2 className="text-xl font-bold text-gray-800 mb-4">–ü–æ–∏—Å–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</h2>
          
          <div className="space-y-4">
            {/* –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ–∏—Å–∫–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
            <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
              <div className="lg:col-span-3">
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  –†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞
                </label>
                <div className="grid grid-cols-3 gap-2">
                  <button
                    type="button"
                    onClick={() => setSearchRegion(225)}
                    className={`
                      relative px-3 py-2 text-sm font-medium rounded-lg border transition-all duration-200 text-center
                      ${searchRegion === 225 
                        ? 'bg-primary text-white border-primary shadow-md transform scale-105' 
                        : 'bg-white text-gray-700 border-gray-200 hover:border-primary hover:bg-gray-50'
                      }
                      cursor-pointer
                    `}
                  >
                    <div className="truncate leading-tight">–ü–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏</div>
                    {searchRegion === 225 && (
                      <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full border-2 border-white"></div>
                    )}
                  </button>
                  
                  <button
                    type="button"
                    onClick={() => setSearchRegion(213)}
                    className={`
                      relative px-3 py-2 text-sm font-medium rounded-lg border transition-all duration-200 text-center
                      ${searchRegion === 213 
                        ? 'bg-primary text-white border-primary shadow-md transform scale-105' 
                        : 'bg-white text-gray-700 border-gray-200 hover:border-primary hover:bg-gray-50'
                      }
                      cursor-pointer
                    `}
                  >
                    <div className="truncate leading-tight">–ü–æ –ú–æ—Å–∫–≤–µ</div>
                    {searchRegion === 213 && (
                      <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full border-2 border-white"></div>
                    )}
                  </button>
                  
                  <button
                    type="button"
                    onClick={() => setSearchRegion(2)}
                    className={`
                      relative px-3 py-2 text-sm font-medium rounded-lg border transition-all duration-200 text-center
                      ${searchRegion === 2 
                        ? 'bg-primary text-white border-primary shadow-md transform scale-105' 
                        : 'bg-white text-gray-700 border-gray-200 hover:border-primary hover:bg-gray-50'
                      }
                      cursor-pointer
                    `}
                  >
                    <div className="truncate leading-tight">–ü–æ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É</div>
                    {searchRegion === 2 && (
                      <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full border-2 border-white"></div>
                    )}
                  </button>
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                </label>
                <select
                  value={searchResultsCount}
                  onChange={(e) => setSearchResultsCount(parseInt(e.target.value))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                >
                  <option value={6}>–¢–æ–ø-6</option>
                  <option value={10}>–¢–æ–ø-10</option>
                  <option value={20}>–¢–æ–ø-20</option>
                </select>
              </div>
            </div>

            {/* –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ */}
            <div className="flex gap-3">
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && handleSearch()}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ö–æ–ª–æ–¥–Ω–∞—è –≤—ã—Å–∞–¥–∫–∞)"
                className="flex-1 px-4 py-3 border border-gray-300 rounded-lg text-base focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              />
              <button
                onClick={handleSearch}
                disabled={loading}
                className="px-6 py-3 bg-primary text-white font-bold text-base rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
              >
                {loading ? "–ü–æ–∏—Å–∫..." : "–ù–∞–π—Ç–∏"}
              </button>
              <button
                onClick={() => {
                  if (window.confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
                    clearLocalStorage();
                    setSearchQuery('');
                    setSearchResults([]);
                    setSelectedResults(new Set());
                    setParsedData([]);
                    setCleanedData([]);
                    setChunks([]);
                    setFinalArticle(null);
                    setArticlePlan(null);
                    setEditablePlan('');
                    setCurrentStep(1);
                    setHasChanges({
                      search: false,
                      parse: false,
                      clean: false,
                      chunk: false,
                      generate: false
                    });
                  }
                }}
                className="px-4 py-3 bg-red-500 text-white font-bold text-base rounded-lg hover:bg-red-600 transition-colors"
                title="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞"
              >
                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
              </button>
            </div>
          </div>

          {error && (
            <div className="p-3 bg-red-100 border border-red-300 text-red-700 rounded-lg text-sm">
              {error}
            </div>
          )}
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —ç—Ç–∞–ø–æ–≤ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π */}
        {currentStep > 1 && (
          <div className="bg-white rounded-xl shadow-md p-6 mb-6">
            <h3 className="text-lg font-bold text-gray-800 mb-4">–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏</h3>
            <div className="flex justify-between items-center mb-4">
              {steps.map((step) => {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —ç—Ç–∞–ø –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                const isAvailable = step.id <= currentStep;
                const isCompleted = step.id < currentStep;
                const isCurrent = step.id === currentStep;
                
                return (
                  <div
                    key={step.id}
                    className={`flex flex-col items-center ${
                      isAvailable 
                        ? 'text-blue-600 cursor-pointer hover:text-blue-700' 
                        : 'text-gray-400 cursor-not-allowed'
                    }`}
                    onClick={() => {
                      if (isAvailable) {
                        handleStepChange(step.id);
                      }
                    }}
                    title={isAvailable ? `–ü–µ—Ä–µ–π—Ç–∏ –∫ —ç—Ç–∞–ø—É: ${step.title}` : '–≠—Ç–∞–ø –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
                  >
                    <div className={`w-10 h-10 rounded-full flex items-center justify-center text-lg mb-2 transition-all duration-200 ${
                      isCurrent
                        ? 'bg-blue-600 text-white border-2 border-blue-600 shadow-lg scale-110' 
                        : isCompleted
                        ? 'bg-green-100 border-2 border-green-600 text-green-600'
                        : isAvailable
                        ? 'bg-blue-100 border-2 border-blue-600 hover:bg-blue-200 hover:scale-105' 
                        : 'bg-gray-200 border-2 border-gray-300'
                    }`}>
                      {isCompleted ? '‚úÖ' : step.icon}
                    </div>
                    <span className="text-xs text-center font-medium">{step.title}</span>
                    {isCurrent && (
                      <div className="mt-1 px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full">
                        –¢–µ–∫—É—â–∏–π
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${(currentStep / steps.length) * 100}%` }}
              ></div>
            </div>
            
            {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
            <div className="flex justify-between items-center mt-4 pt-4 border-t border-gray-200">
              <div className="flex gap-2">
                <button
                  onClick={() => handleStepChange(Math.max(1, currentStep - 1))}
                  disabled={currentStep <= 1}
                  className="px-4 py-2 bg-gray-500 text-white font-medium rounded-lg hover:bg-gray-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors text-sm"
                >
                  ‚Üê –ù–∞–∑–∞–¥
                </button>
                <button
                  onClick={() => handleStepChange(Math.min(steps.length, currentStep + 1))}
                  disabled={currentStep >= steps.length}
                  className="px-4 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors text-sm"
                >
                  –í–ø–µ—Ä–µ–¥ ‚Üí
                </button>
              </div>
              
              <div className="text-sm text-gray-600">
                –≠—Ç–∞–ø {currentStep} –∏–∑ {steps.length}
              </div>
            </div>
          </div>
        )}

                {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ */}
        {currentStep > 1 && (hasChanges.search || hasChanges.parse || hasChanges.clean || hasChanges.chunk) && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-xl p-4 mb-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-6 h-6 bg-yellow-400 rounded-full flex items-center justify-center">
                  <span className="text-yellow-800 text-sm">‚ö†Ô∏è</span>
                </div>
                <div>
                  <h4 className="font-semibold text-yellow-800">–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</h4>
                  <p className="text-yellow-700 text-sm">–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É</p>
                </div>
              </div>
              <div className="flex gap-2">
                <button
                  onClick={saveCurrentData}
                  className="px-4 py-2 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 transition-colors text-sm"
                >
                  üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
                <button
                  onClick={restoreData}
                  className="px-4 py-2 bg-gray-500 text-white font-medium rounded-lg hover:bg-gray-600 transition-colors text-sm"
                >
                  üîÑ –û—Ç–º–µ–Ω–∏—Ç—å
                </button>
              </div>
            </div>
          </div>
        )}

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏ */}
        {searchResults.length > 0 && (
          <div className="bg-white rounded-xl shadow-md p-6">
            {/* –≠—Ç–∞–ø 1: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
            {currentStep === 1 && (
              <>
            <div className="flex justify-between items-center mb-5">
              <h3 className="text-xl font-bold text-gray-800 flex items-center gap-2">
                –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ ({searchResults.length})
                {hasChanges.search && (
                  <span className="px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded-full">
                    ‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è
                  </span>
                )}
              </h3>
              <div className="flex gap-3">
                <button
                  onClick={handleSelectAll}
                  className="px-4 py-2 border border-gray-300 text-gray-700 font-medium rounded-lg hover:bg-gray-50 transition-colors text-sm"
                >
                  {selectedResults.size === searchResults.length ? "–°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ" : "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"}
                </button>
                <button
                  onClick={handleGenerateArticle}
                  disabled={selectedResults.size === 0}
                  className="px-4 py-2 bg-green-600 text-white font-bold rounded-lg hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors text-sm"
                >
                  –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ({selectedResults.size})
                </button>
              </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
              {searchResults.map((result, index) => (
                <div
                  key={index}
                  className={`border rounded-lg p-4 transition-all duration-200 h-[180px] cursor-pointer content-card ${
                    selectedResults.has(index)
                      ? "border-primary bg-blue-50 shadow-md"
                      : "border-gray-200 hover:border-gray-300 hover:shadow-sm"
                  }`}
                  onClick={() => handleResultSelect(index)}
                >
                  <div className="flex items-start gap-3 h-full">
                    {/* –ù–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ */}
                    <div className="flex-shrink-0 w-8 h-8 bg-primary text-white text-sm font-bold rounded-full flex items-center justify-center">
                      {index + 1}
                    </div>
                    
                    {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
                    <div className="flex-1 min-w-0 h-full flex flex-col">
                      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ - —Ä–æ–≤–Ω–æ 2 —Å—Ç—Ä–æ–∫–∏ */}
                      <h4 className="text-base font-bold text-gray-800 mb-2 h-10 leading-5 overflow-hidden">
                        <div className="line-clamp-2">
                          {result.title}
                        </div>
                      </h4>
                      
                      {/* URL - —Ä–æ–≤–Ω–æ 1 —Å—Ç—Ä–æ–∫–∞ */}
                      <a
                        href={result.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-primary hover:underline text-xs mb-2 block url-text h-4 leading-4 overflow-hidden"
                        onClick={(e) => e.stopPropagation()}
                        title={result.url}
                      >
                        {result.url}
                      </a>
                      
                      {/* –û–ø–∏—Å–∞–Ω–∏–µ - —Ä–æ–≤–Ω–æ 2 —Å—Ç—Ä–æ–∫–∏ */}
                      <p className="text-gray-600 text-sm leading-5 h-10 overflow-hidden flex-1">
                        <span className="line-clamp-2">
                          {result.snippet}
                        </span>
                      </p>
                      
                      {/* Toggle –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å */}
                      <div className="mt-auto pt-2">
                        <div className="flex items-center">
                          <div className="relative">
                            <input
                              type="checkbox"
                              checked={selectedResults.has(index)}
                              readOnly
                              className="sr-only"
                            />
                            <div className={`block w-10 h-6 rounded-full transition-colors ${
                              selectedResults.has(index) ? 'bg-green-500' : 'bg-gray-300'
                            }`}></div>
                            <div className={`absolute left-1 top-1 bg-white w-4 h-4 rounded-full transition-transform ${
                              selectedResults.has(index) ? 'transform translate-x-4' : ''
                            }`}></div>
                          </div>
                          <span className="ml-2 text-xs text-gray-600 font-medium">
                            {selectedResults.has(index) ? '–í—ã–±—Ä–∞–Ω–æ' : '–í—ã–±—Ä–∞—Ç—å'}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {selectedResults.size > 0 && (
              <div className="mt-5 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-bold text-gray-800 text-base">
                      –í—ã–±—Ä–∞–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {selectedResults.size}
                    </h4>
                    <p className="text-gray-600 text-sm">
                      –ù–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ SEO-—Å—Ç–∞—Ç—å—è
                    </p>
                  </div>
                  <div className="flex gap-3">
                                            <button
                        onClick={handleGenerateArticle}
                        disabled={loading}
                        className="px-6 py-3 bg-primary text-white font-bold text-base rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
                      >
                        {loading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'}
                      </button>
                      </div>
                    </div>
                  </div>
                )}
              </>
            )}

            {/* –≠—Ç–∞–ø 2: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ */}
            {currentStep === 2 && parsedData.length > 0 && (
              <>
                <div className="flex justify-between items-center mb-5">
                  <h3 className="text-xl font-bold text-gray-800 flex items-center gap-2">
                    üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
                    {hasChanges.parse && (
                      <span className="px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded-full">
                        ‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è
                      </span>
                    )}
                  </h3>
                      <button
                     onClick={() => handleStepChange(2.5)}
                        disabled={loading}
                        className="px-6 py-3 bg-green-600 text-white font-bold text-base rounded-lg hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
                      >
                     {loading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—á–∏—Å—Ç–∫—É'}
                      </button>
                </div>

                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ */}
                {parsingStats && (
                  <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-blue-600">{parsingStats.total_requested}</div>
                        <div className="text-sm text-gray-600">–ó–∞–ø—Ä–æ—à–µ–Ω–æ URL</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-green-600">{parsingStats.total_parsed}</div>
                        <div className="text-sm text-gray-600">–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-red-600">{parsingStats.total_failed}</div>
                        <div className="text-sm text-gray-600">–û—à–∏–±–æ–∫</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-purple-600">{parsingStats.success_rate.toFixed(1)}%</div>
                        <div className="text-sm text-gray-600">–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞</div>
                      </div>
                    </div>
                    
                    {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ */}
                    <div className="w-full bg-gray-200 rounded-full h-2 mb-4">
                      <div 
                        className="bg-green-600 h-2 rounded-full transition-all duration-300"
                        style={{ width: `${parsingStats.success_rate}%` }}
                      ></div>
                    </div>
                  </div>
                )}

                                 {/* –°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π */}
                 <div className="mb-6">
                   <h4 className="text-lg font-semibold text-gray-800 mb-3">
                     ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ ({getFilteredArticles().length}/{parsedData.length})
                   </h4>
                   <div className="space-y-4">
                     {parsedData.map((article, index) => {
                       const isExcluded = excludedArticles.has(article.url);
                       return (
                         <div 
                           key={index} 
                           className={`border rounded-lg p-4 transition-all duration-200 content-card ${
                             isExcluded 
                               ? 'border-gray-300 bg-gray-100 opacity-60' 
                               : 'border-green-200 bg-green-50'
                           }`}
                         >
                           <div className="flex justify-between items-start mb-3">
                             <div className="flex-1">
                               <h5 className={`font-bold mb-2 break-words ${
                                 isExcluded ? 'text-gray-500' : 'text-gray-800'
                               }`}>
                                 {article.title}
                               </h5>
                               <p className={`text-sm mb-1 url-text ${
                                 isExcluded ? 'text-gray-400' : 'text-gray-600'
                               }`}>URL: {article.url}</p>
                               <p className={`text-sm ${
                                 isExcluded ? 'text-gray-400' : 'text-gray-600'
                               }`}>–°–ª–æ–≤: {article.word_count}</p>
                             </div>
                             <div className="flex gap-2">
                               <button
                                 onClick={() => handleToggleArticle(index)}
                                 className={`px-3 py-1 text-xs rounded transition-colors ${
                                   isExcluded
                                     ? 'bg-gray-500 text-white hover:bg-gray-600'
                                     : 'bg-green-600 text-white hover:bg-green-700'
                                 }`}
                               >
                                 {expandedArticles.has(index) ? '–°–≤–µ—Ä–Ω—É—Ç—å' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å'}
                               </button>
                               <button
                                 onClick={() => isExcluded ? handleRestoreArticle(index) : handleExcludeArticle(index)}
                                 className={`px-3 py-1 text-xs rounded transition-colors ${
                                   isExcluded
                                     ? 'bg-blue-600 text-white hover:bg-blue-700'
                                     : 'bg-red-600 text-white hover:bg-red-700'
                                 }`}
                               >
                                 {isExcluded ? '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–ò—Å–∫–ª—é—á–∏—Ç—å'}
                               </button>
                             </div>
                           </div>
                           
                           <div className={`text-sm bg-white p-3 rounded ${
                             isExcluded ? 'text-gray-400' : 'text-gray-600'
                           }`}>
                             {expandedArticles.has(index) ? (
                               <div className="whitespace-pre-wrap break-words max-h-96 overflow-y-auto">
                                 {article.content}
                               </div>
                             ) : (
                               <div className="max-h-20 overflow-y-auto break-words">
                                 {article.content.substring(0, 200)}...
                               </div>
                             )}
                           </div>
                         </div>
                       );
                     })}
                   </div>
                 </div>

                {/* –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö URL */}
                {parsingStats && parsingStats.failed_urls.length > 0 && (
                  <div className="mb-6">
                    <h4 className="text-lg font-semibold text-gray-800 mb-3">
                      ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ({parsingStats.failed_urls.length})
                    </h4>
                    <div className="space-y-3">
                      {parsingStats.failed_urls.map((failed, index) => (
                        <div key={index} className="border border-red-200 bg-red-50 rounded-lg p-3 content-card">
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <p className="text-sm font-medium text-gray-800 mb-1 url-text break-words">{failed.url}</p>
                              <p className="text-sm text-red-600 break-words">{failed.error}</p>
                            </div>
                            <div className="flex items-center gap-2">
                              <span className="px-2 py-1 text-xs bg-red-100 text-red-800 rounded">
                                {failed.error_type === 'request_error' ? 'HTTP –æ—à–∏–±–∫–∞' :
                                 failed.error_type === 'parsing_error' ? '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞' :
                                 failed.error_type === 'content_too_short' ? '–ú–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞' : '–û—à–∏–±–∫–∞'}
                              </span>
                              <button
                                onClick={() => toggleManualContent(failed.url)}
                                className="px-3 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
                              >
                                {manualContentMode[failed.url] ? '–û—Ç–º–µ–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é'}
                              </button>
                            </div>
                          </div>
                          
                          {/* –ü–æ–ª–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
                          {manualContentMode[failed.url] && (
                            <div className="mt-3 p-3 bg-white border border-gray-200 rounded-lg">
                              <div className="mb-3">
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                  –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏
                                </label>
                                <input
                                  type="text"
                                  value={manualContentTitle[failed.url] || ''}
                                  onChange={(e) => setManualContentTitle(prev => ({
                                    ...prev,
                                    [failed.url]: e.target.value
                                  }))}
                                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏"
                                  className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 break-words"
                                />
                              </div>
                              <div className="mb-3">
                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                  –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
                                </label>
                                <textarea
                                  value={manualContent[failed.url] || ''}
                                  onChange={(e) => setManualContent(prev => ({
                                    ...prev,
                                    [failed.url]: e.target.value
                                  }))}
                                  placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —Å —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã..."
                                  rows={8}
                                  className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none break-words"
                                />
                                <div className="mt-1 text-xs text-gray-500">
                                  –°–ª–æ–≤: {(manualContent[failed.url] || '').split(/\s+/).filter(word => word.length > 0).length}
                                </div>
                              </div>
                              <div className="flex gap-2">
                                <button
                                  onClick={() => saveManualContent(failed.url)}
                                  disabled={!manualContent[failed.url]?.trim()}
                                  className="px-4 py-2 bg-green-600 text-white text-sm rounded hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
                                >
                                  üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                                </button>
                                <button
                                  onClick={() => cancelManualContent(failed.url)}
                                  className="px-4 py-2 bg-gray-500 text-white text-sm rounded hover:bg-gray-600 transition-colors"
                                >
                                  ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å
                                </button>
                              </div>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </>
            )}

                         {/* –≠—Ç–∞–ø 2.5: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏ */}
             {currentStep === 2.5 && parsedData.length > 0 && (
               <>
                 <div className="flex justify-between items-center mb-5">
                   <h3 className="text-xl font-bold text-gray-800">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</h3>
                      <button
                     onClick={handleClean}
                        disabled={loading}
                     className="px-6 py-3 bg-yellow-600 text-white font-bold text-base rounded-lg hover:bg-yellow-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
                      >
                     {loading ? '–û—á–∏—Å—Ç–∫–∞...' : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É'}
                      </button>
                  </div>
                 
                                   {/* –†–µ–∂–∏–º –æ—á–∏—Å—Ç–∫–∏ */}
                  <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                    <h4 className="font-bold text-gray-800 mb-3">–†–µ–∂–∏–º –æ—á–∏—Å—Ç–∫–∏</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="flex items-center">
                        <input
                          type="radio"
                          id="manual"
                          name="cleaningMode"
                          value="manual"
                          checked={cleaningSettings.mode === 'manual'}
                          onChange={(e) => setCleaningSettings({
                            ...cleaningSettings,
                            mode: e.target.value
                          })}
                          className="mr-2"
                        />
                        <label htmlFor="manual" className="font-medium text-gray-700">
                          –†—É—á–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                        </label>
                      </div>
                      <div className="flex items-center">
                        <input
                          type="radio"
                          id="automatic"
                          name="cleaningMode"
                          value="automatic"
                          checked={cleaningSettings.mode === 'automatic'}
                          onChange={(e) => setCleaningSettings({
                            ...cleaningSettings,
                            mode: e.target.value
                          })}
                          className="mr-2"
                        />
                        <label htmlFor="automatic" className="font-medium text-gray-700">
                          –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞
                        </label>
                      </div>
                    </div>
                  </div>
                  
                  {/* –î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞) */}
                  {cleaningSettings.mode === 'automatic' && (
                   <div className="mb-6 p-4 bg-gray-50 border border-gray-200 rounded-lg">
                     <h4 className="font-bold text-gray-800 mb-3">–î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
                     <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                       <div className="flex items-center">
                         <input
                           type="checkbox"
                           id="removeTechnical"
                           checked={cleaningSettings.removeTechnicalBlocks}
                           onChange={(e) => updateCleaningSettings({
                             removeTechnicalBlocks: e.target.checked
                           })}
                           className="mr-2"
                         />
                         <label htmlFor="removeTechnical" className="text-gray-700">
                           –£–¥–∞–ª—è—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏
                         </label>
                       </div>
                       <div className="flex items-center">
                         <input
                           type="checkbox"
                           id="removeDuplicates"
                           checked={cleaningSettings.removeDuplicates}
                           onChange={(e) => updateCleaningSettings({
                             removeDuplicates: e.target.checked
                           })}
                           className="mr-2"
                         />
                         <label htmlFor="removeDuplicates" className="text-gray-700">
                           –£–¥–∞–ª—è—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã
                         </label>
                       </div>
                       <div className="flex items-center">
                         <input
                           type="checkbox"
                           id="filterRelevance"
                           checked={cleaningSettings.filterRelevance}
                           onChange={(e) => updateCleaningSettings({
                             filterRelevance: e.target.checked
                           })}
                           className="mr-2"
                         />
                         <label htmlFor="filterRelevance" className="text-gray-700">
                           –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                         </label>
                       </div>
                     </div>
                     
                     <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
                       <div>
                         <label className="block text-sm font-medium text-gray-700 mb-1">
                           –ú–∏–Ω. –¥–ª–∏–Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
                         </label>
                         <input
                           type="number"
                           value={cleaningSettings.minParagraphLength}
                           onChange={(e) => updateCleaningSettings({
                             minParagraphLength: parseInt(e.target.value)
                           })}
                           className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                         />
                       </div>
                       <div>
                         <label className="block text-sm font-medium text-gray-700 mb-1">
                           –ú–∞–∫—Å. –¥–ª–∏–Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
                         </label>
                         <input
                           type="number"
                           value={cleaningSettings.maxParagraphLength}
                           onChange={(e) => updateCleaningSettings({
                             maxParagraphLength: parseInt(e.target.value)
                           })}
                           className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                         />
                       </div>
                       <div>
                         <label className="block text-sm font-medium text-gray-700 mb-1">
                           –ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                         </label>
                         <input
                           type="number"
                           step="0.1"
                           min="0"
                           max="1"
                           value={cleaningSettings.relevanceThreshold}
                           onChange={(e) => updateCleaningSettings({
                             relevanceThreshold: parseFloat(e.target.value)
                           })}
                           className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm"
                         />
                       </div>
                     </div>
          </div>
        )}

                                   {/* –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä */}
                  <div className="mb-6">
                    <h4 className="text-lg font-semibold text-gray-800 mb-3">
                      üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä ({getFilteredArticles().length}/{parsedData.length} —Å—Ç–∞—Ç–µ–π)
                    </h4>
                    

                    
                    {getFilteredArticles().length > 0 && (
            <div className="space-y-4">
              {getFilteredArticles().map((article) => {
                // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç–∞—Ç—å–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –º–∞—Å—Å–∏–≤–µ parsedData
                const originalIndex = parsedData.findIndex(a => a.url === article.url);
                return (
                <div key={originalIndex} className="border border-gray-200 rounded-lg p-4 content-card">
                            <div className="flex justify-between items-start mb-3">
                              <div className="flex-1">
                                <h5 className="font-bold text-gray-800 mb-2 break-words">{article.title}</h5>
                                <p className="text-sm text-gray-600 mb-1 url-text">URL: {article.url}</p>
                                <p className="text-sm text-gray-600">–°–ª–æ–≤: {originalContent[originalIndex] ? 
                                  originalContent[originalIndex].split(/\s+/).filter(word => word.length > 0).length : 
                                  article.word_count}</p>
                  </div>
                              <button
                                onClick={() => handleToggleArticle(originalIndex)}
                                className="ml-4 px-3 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
                              >
                                {expandedArticles.has(originalIndex) ? '–°–≤–µ—Ä–Ω—É—Ç—å' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å'}
                              </button>
                            </div>
                            
                                                         {cleaningSettings.mode === 'manual' && expandedArticles.has(originalIndex) ? (
                               // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                               <div className="text-sm text-gray-600 bg-white p-3 rounded">
                                 <textarea
                                   value={editableContent[originalIndex] || article.content}
                                   onChange={(e) => setEditableContent({
                                     ...editableContent,
                                     [originalIndex]: e.target.value
                                   })}
                                   className="w-full h-96 p-3 border border-gray-300 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500"
                                   placeholder="–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å..."
                                 />
                                 <div className="mt-2 flex justify-between items-center">
                                   <span className="text-xs text-gray-500">
                                     –°–ª–æ–≤: {editableContent[originalIndex] ? editableContent[originalIndex].split(/\s+/).filter(word => word.length > 0).length : article.word_count}
                                   </span>
                                   <div className="flex gap-2">
                                     <button
                                       onClick={() => {
                                         setOriginalContent({
                                           ...originalContent,
                                           [originalIndex]: editableContent[originalIndex] || article.content
                                         });
                                       }}
                                       className="px-3 py-1 text-xs bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
                                     >
                                       –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                                     </button>
                                     <button
                                       onClick={() => setEditableContent({
                                         ...editableContent,
                                         [originalIndex]: originalContent[originalIndex] || article.content
                                       })}
                                       className="px-3 py-1 text-xs bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors"
                                     >
                                       –°–±—Ä–æ—Å–∏—Ç—å
                                     </button>
                                   </div>
                                 </div>
                               </div>
                            ) : (
                              // –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–ª–∏ —Å–≤–µ—Ä–Ω—É—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                              <div className="text-sm text-gray-600 bg-white p-3 rounded">
                                {expandedArticles.has(originalIndex) ? (
                                  <div className="whitespace-pre-wrap break-words max-h-96 overflow-y-auto">
                                    {editableContent[originalIndex] || article.content}
                                  </div>
                                ) : (
                                  <div className="max-h-20 overflow-y-auto break-words">
                                    {(editableContent[originalIndex] || article.content).substring(0, 200)}...
                                  </div>
                                )}
                              </div>
                            )}
                </div>
              );
              })}
            </div>
                    )}
          </div>
               </>
             )}

             {/* –≠—Ç–∞–ø 3: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏ */}
             {currentStep === 3 && cleanedData.length > 0 && (
               <>
                 <div className="flex justify-between items-center mb-5">
                   <h3 className="text-xl font-bold text-gray-800 flex items-center gap-2">
                     üßπ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏ ({cleanedData.filter(article => !excludedArticles.has(article.url)).length}/{cleanedData.length})
                     {hasChanges.clean && (
                       <span className="px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded-full">
                         ‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è
                       </span>
                     )}
                   </h3>
                   <button
                     onClick={handleChunk}
                     disabled={loading}
                     className="px-6 py-3 bg-yellow-600 text-white font-bold text-base rounded-lg hover:bg-yellow-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
                   >
                     {loading ? '–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —á–∞–Ω–∫–∏'}
                   </button>
                 </div>
                 

                 
            <div className="space-y-4">
              {cleanedData.filter(article => !excludedArticles.has(article.url)).map((article, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-4 content-card">
                       <div className="flex justify-between items-start mb-3">
                         <div className="flex-1">
                  <h4 className="font-bold text-gray-800 mb-2 break-words">{article.title}</h4>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <p className="text-sm font-medium text-gray-600">–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</p>
                      <p className="text-sm text-gray-600">–°–ª–æ–≤: {article.word_count}</p>
                    </div>
                    <div>
                      <p className="text-sm font-medium text-gray-600">–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</p>
                      <p className="text-sm text-gray-600">–°–ª–æ–≤: {article.cleaned_word_count}</p>
                      <p className="text-sm text-green-600">
                        –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: {Math.round((1 - article.cleaned_word_count / article.word_count) * 100)}%
                      </p>
                    </div>
                  </div>
                         </div>
                         <button
                           onClick={() => handleToggleArticle(index)}
                           className="ml-4 px-3 py-1 text-xs bg-yellow-600 text-white rounded hover:bg-yellow-700 transition-colors"
                         >
                           {expandedArticles.has(index) ? '–°–≤–µ—Ä–Ω—É—Ç—å' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å'}
                         </button>
                       </div>
                       <div className="text-sm text-gray-600 bg-gray-50 p-3 rounded">
                         {expandedArticles.has(index) ? (
                           <div className="whitespace-pre-wrap break-words max-h-96 overflow-y-auto">
                             {article.cleaned_content}
                           </div>
                         ) : (
                           <div className="max-h-20 overflow-y-auto break-words">
                    {article.cleaned_content.substring(0, 200)}...
                           </div>
                         )}
                  </div>
                </div>
              ))}
            </div>
               </>
             )}

                         {/* –≠—Ç–∞–ø 4: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–∞–Ω–∫–∏–Ω–≥–∞ */}
             {currentStep === 4 && chunks.length > 0 && (
               <>
                 <div className="flex justify-between items-center mb-5">
                   <h3 className="text-xl font-bold text-gray-800 flex items-center gap-2">
                     üî™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —á–∞–Ω–∫–∏
                     {hasChanges.chunk && (
                       <span className="px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded-full">
                         ‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è
                       </span>
                     )}
                   </h3>
                   <button
                     onClick={handleGeneratePlan}
                     disabled={loading}
                     className="px-6 py-3 bg-purple-600 text-white font-bold text-base rounded-lg hover:bg-purple-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
                   >
                     {loading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Å—Ç–∞—Ç—å–∏'}
                   </button>
                 </div>
                 
                 {/* –°—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ */}
                 {loading && planGenerationLog && (
                   <div className="mt-3 p-2 bg-blue-50 border border-blue-200 rounded-lg">
                     <div className="text-sm text-blue-800 truncate" title={planGenerationLog}>
                       {planGenerationLog}
                     </div>
                   </div>
                 )}
                 
                 <div className="mb-4 p-3 bg-gray-50 rounded-lg">
                   <p className="text-sm text-gray-600 mb-2">–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: {chunks.length}</p>
                   <div className="flex gap-4 text-xs">
                     <span className="text-red-600">–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {Object.values(chunkPriorities).filter(p => p === 'high').length}</span>
                     <span className="text-blue-600">–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {Object.values(chunkPriorities).filter(p => p === 'medium').length}</span>
                     <span className="text-yellow-600">–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {Object.values(chunkPriorities).filter(p => p === 'low').length}</span>
                     <span className="text-gray-600">–ò—Å–∫–ª—é—á–µ–Ω–æ: {excludedChunks.size}</span>
                   </div>
                 </div>
                 <div className="space-y-2 mb-6">
              {chunks.map((chunk, index) => (
                     <div key={index} className={`border rounded p-3 content-card ${isChunkExcluded(index) ? 'border-red-300 bg-red-50' : 'border-gray-200'}`}>
                  <div className="flex justify-between items-center mb-2">
                         <div className="flex items-center gap-2">
                    <span className="text-sm font-medium text-gray-600">–ß–∞–Ω–∫ {index + 1}</span>
                    <span className="text-xs text-gray-500">–°–ª–æ–≤: {chunk.word_count}</span>
                           {getChunkPriority(index) === 'high' && (
                             <span className="text-xs bg-red-100 text-red-800 px-2 py-1 rounded">–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</span>
                           )}
                           {getChunkPriority(index) === 'low' && (
                             <span className="text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded">–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</span>
                           )}
                  </div>
                         <div className="flex items-center gap-2">
                           {/* –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ */}
                           <div className="flex gap-1">
                             <button
                               onClick={() => handleChunkPriority(index, 'low')}
                               className={`px-2 py-1 text-xs rounded transition-colors ${
                                 getChunkPriority(index) === 'low' 
                                   ? 'bg-yellow-600 text-white' 
                                   : 'bg-gray-200 text-gray-700 hover:bg-yellow-100'
                               }`}
                               title="–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
                             >
                               –ù–∏–∑–∫–∏–π
                             </button>
                             <button
                               onClick={() => handleChunkPriority(index, 'medium')}
                               className={`px-2 py-1 text-xs rounded transition-colors ${
                                 getChunkPriority(index) === 'medium' 
                                   ? 'bg-blue-600 text-white' 
                                   : 'bg-gray-200 text-gray-700 hover:bg-blue-100'
                               }`}
                               title="–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
                             >
                               –°—Ä–µ–¥–Ω–∏–π
                             </button>
                             <button
                               onClick={() => handleChunkPriority(index, 'high')}
                               className={`px-2 py-1 text-xs rounded transition-colors ${
                                 getChunkPriority(index) === 'high' 
                                   ? 'bg-red-600 text-white' 
                                   : 'bg-gray-200 text-gray-700 hover:bg-red-100'
                               }`}
                               title="–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
                             >
                               –í—ã—Å–æ–∫–∏–π
                             </button>
                           </div>
                           
                           {/* –ö–Ω–æ–ø–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è */}
                           <button
                             onClick={() => handleToggleChunkExclusion(index)}
                             className={`px-2 py-1 text-xs rounded transition-colors ${
                               isChunkExcluded(index)
                                 ? 'bg-green-600 text-white hover:bg-green-700'
                                 : 'bg-red-600 text-white hover:bg-red-700'
                             }`}
                             title={isChunkExcluded(index) ? '–í–∫–ª—é—á–∏—Ç—å —á–∞–Ω–∫' : '–ò—Å–∫–ª—é—á–∏—Ç—å —á–∞–Ω–∫'}
                           >
                             {isChunkExcluded(index) ? '–í–∫–ª—é—á–∏—Ç—å' : '–ò—Å–∫–ª—é—á–∏—Ç—å'}
                           </button>
                           
                           {/* –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å/—Å–≤–µ—Ä–Ω—É—Ç—å */}
                           <button
                             onClick={() => handleToggleArticle(index)}
                             className="px-2 py-1 text-xs bg-purple-600 text-white rounded hover:bg-purple-700 transition-colors"
                           >
                             {expandedArticles.has(index) ? '–°–≤–µ—Ä–Ω—É—Ç—å' : '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å'}
                           </button>
                         </div>
                       </div>
                       <div className="text-sm text-gray-600 bg-gray-50 p-2 rounded">
                         {expandedArticles.has(index) ? (
                           <div className="whitespace-pre-wrap break-words">
                             {chunk.text}
                           </div>
                         ) : (
                           <div className="max-h-16 overflow-hidden break-words">
                    {chunk.text.substring(0, 150)}...
                           </div>
                         )}
                  </div>
                  {chunk.keywords && (
                    <div className="mt-2 flex flex-wrap gap-1">
                      {chunk.keywords.slice(0, 5).map((keywordObj, kidx) => (
                        <span key={kidx} className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                          {typeof keywordObj === 'string' ? keywordObj : keywordObj.keyword}
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>
                 

               </>
             )}

                             {/* –≠—Ç–∞–ø 5: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ */}
                           {currentStep === 5 && chunks.length > 0 && (
               <>
                 <div className="flex justify-between items-center mb-5">
                   <h3 className="text-xl font-bold text-gray-800">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏</h3>
                   <button
                     onClick={handleGenerate}
                     disabled={loading}
                     className="px-6 py-3 bg-purple-600 text-white font-bold text-base rounded-lg hover:bg-purple-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
                   >
                     {loading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏...' : '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é'}
                   </button>
                 </div>
                 
                 {/* –°—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ */}
                 {loading && articleGenerationLog && (
                   <div className="mt-3 p-2 bg-purple-50 border border-purple-200 rounded-lg">
                     <div className="text-sm text-purple-800 truncate" title={articleGenerationLog}>
                       {articleGenerationLog}
                     </div>
                   </div>
                 )}
                 
                 {/* –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –ø–ª–∞–Ω —Å—Ç–∞—Ç—å–∏ */}
                 {editablePlan && (
                   <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
                     <h4 className="text-lg font-semibold text-green-800 mb-3">üìã –ü–ª–∞–Ω —Å—Ç–∞—Ç—å–∏ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π)</h4>
                     <div className="bg-white p-4 rounded border border-green-200">
                       <textarea
                         value={editablePlan}
                         onChange={(e) => setEditablePlan(e.target.value)}
                         className="w-full h-64 p-3 border border-gray-300 rounded-md text-sm leading-relaxed resize-none"
                         placeholder="–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–ª–∞–Ω —Å—Ç–∞—Ç—å–∏ –∑–¥–µ—Å—å..."
                       />
                     </div>
                   </div>
                 )}
                 
                 {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ */}
                 <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                   <h4 className="text-lg font-semibold text-blue-800 mb-3">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏</h4>
                   <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                     <div>
                       <label className="block text-sm font-medium text-blue-700 mb-1">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</label>
                       <input
                         type="number"
                         min="0"
                         max="2"
                         step="0.1"
                         value={modelSettings.temperature}
                         onChange={(e) => setModelSettings({...modelSettings, temperature: parseFloat(e.target.value)})}
                         className="w-full px-3 py-2 border border-blue-300 rounded-md text-sm bg-white"
                       />
                     </div>
                     <div>
                       <label className="block text-sm font-medium text-blue-700 mb-1">–î–ª–∏–Ω–∞ —Å—Ç–∞—Ç—å–∏ (–∑–Ω–∞–∫–æ–≤)</label>
                       <input
                         type="number"
                         min="1000"
                         max="20000"
                         step="500"
                         value={settings.targetLengthChars}
                         onChange={(e) => setSettings({...settings, targetLengthChars: parseInt(e.target.value)})}
                         className="w-full px-3 py-2 border border-blue-300 rounded-md text-sm bg-white"
                       />
                     </div>
                   </div>
                   
                   {/* –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç */}
                   <div className="mt-4">
                     <label className="block text-sm font-medium text-blue-700 mb-1">–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç</label>
                     <textarea
                       value={modelSettings.system_prompt}
                       onChange={(e) => setModelSettings({...modelSettings, system_prompt: e.target.value})}
                       rows="3"
                       className="w-full px-3 py-2 border border-blue-300 rounded-md text-sm bg-white resize-none"
                       placeholder="–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏..."
                     />
                   </div>
                 </div>

                 {/* SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è */}
                 <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
                   <h4 className="text-lg font-semibold text-green-800 mb-3">üéØ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</h4>
                   <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                     <div>
                       <label className="block text-sm font-medium text-green-700 mb-1">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</label>
                       <input
                         type="text"
                         value={seoSettings.additionalKeywords}
                         onChange={(e) => updateSeoSettings({additionalKeywords: e.target.value})}
                         className="w-full px-3 py-2 border border-green-300 rounded-md text-sm bg-white"
                         placeholder="–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"
                       />
                     </div>
                     <div>
                       <label className="block text-sm font-medium text-green-700 mb-1">LSI-–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</label>
                       <input
                         type="text"
                         value={seoSettings.lsiKeywords}
                         onChange={(e) => updateSeoSettings({lsiKeywords: e.target.value})}
                         className="w-full px-3 py-2 border border-green-300 rounded-md text-sm bg-white"
                         placeholder="–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"
                       />
                     </div>
                     <div>
                       <label className="block text-sm font-medium text-green-700 mb-1">–¶–µ–ª–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã</label>
                       <input
                         type="text"
                         value={seoSettings.targetPhrases}
                         onChange={(e) => updateSeoSettings({targetPhrases: e.target.value})}
                         className="w-full px-3 py-2 border border-green-300 rounded-md text-sm bg-white"
                         placeholder="–î–ª–∏–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã (3-5 —Å–ª–æ–≤)"
                       />
                     </div>
                     <div>
                       <label className="block text-sm font-medium text-green-700 mb-1">
                         –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {seoSettings.keywordDensity}%
                       </label>
                       <input
                         type="range"
                         min="1"
                         max="5"
                         step="0.5"
                         value={seoSettings.keywordDensity}
                         onChange={(e) => updateSeoSettings({keywordDensity: parseFloat(e.target.value)})}
                         className="w-full"
                       />
                     </div>
                   </div>
                 </div>

                 {/* –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                 <div className="mb-6 p-4 bg-purple-50 border border-purple-200 rounded-lg">
                   <h4 className="text-lg font-semibold text-purple-800 mb-3">‚öôÔ∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
                   <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                     <div>
                       <label className="block text-sm font-medium text-purple-700 mb-1">–°—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è</label>
                       <select
                         value={seoSettings.writingStyle}
                         onChange={(e) => updateSeoSettings({writingStyle: e.target.value})}
                         className="w-full px-3 py-2 border border-purple-300 rounded-md text-sm bg-white"
                       >
                         <option value="technical">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π</option>
                         <option value="simple">–ü—Ä–æ—Å—Ç–æ–π</option>
                         <option value="marketing">–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π</option>
                         <option value="academic">–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π</option>
                       </select>
                     </div>
                     <div>
                       <label className="block text-sm font-medium text-purple-700 mb-1">–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞</label>
                       <select
                         value={seoSettings.contentType}
                         onChange={(e) => updateSeoSettings({contentType: e.target.value})}
                         className="w-full px-3 py-2 border border-purple-300 rounded-md text-sm bg-white"
                       >
                         <option value="educational">–û–±—É—á–∞—é—â–∏–π</option>
                         <option value="review">–û–±–∑–æ—Ä–Ω—ã–π</option>
                         <option value="analytical">–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
                         <option value="practical">–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π</option>
                       </select>
                     </div>
                     <div>
                       <label className="block text-sm font-medium text-purple-700 mb-1">–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è</label>
                       <select
                         value={seoSettings.targetAudience}
                         onChange={(e) => updateSeoSettings({targetAudience: e.target.value})}
                         className="w-full px-3 py-2 border border-purple-300 rounded-md text-sm bg-white"
                       >
                         <option value="specialists">–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã</option>
                         <option value="beginners">–ù–æ–≤–∏—á–∫–∏</option>
                         <option value="managers">–ú–µ–Ω–µ–¥–∂–µ—Ä—ã</option>
                         <option value="general">–í—Å–µ</option>
                       </select>
                     </div>
                     <div>
                       <label className="block text-sm font-medium text-purple-700 mb-1">–¢–∏–ø –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤</label>
                       <select
                         value={seoSettings.headingType}
                         onChange={(e) => updateSeoSettings({headingType: e.target.value})}
                         className="w-full px-3 py-2 border border-purple-300 rounded-md text-sm bg-white"
                       >
                         <option value="h2">H2</option>
                         <option value="h3">H3</option>
                         <option value="numbered">–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ</option>
                         <option value="bulleted">–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</option>
                       </select>
                     </div>
                   </div>
                   
                   {/* SEO-–ø—Ä–æ–º–ø—Ç */}
                   <div className="mt-4">
                     <label className="block text-sm font-medium text-purple-700 mb-1">SEO-–ø—Ä–æ–º–ø—Ç</label>
                     <textarea
                       value={seoSettings.seoPrompt}
                       onChange={(e) => updateSeoSettings({seoPrompt: e.target.value})}
                       rows="2"
                       className="w-full px-3 py-2 border border-purple-300 rounded-md text-sm bg-white resize-none"
                       placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏..."
                     />
                   </div>
                 </div>

                 {/* –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                 <div className="mb-6 p-4 bg-orange-50 border border-orange-200 rounded-lg">
                   <h4 className="text-lg font-semibold text-orange-800 mb-3">üìù –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
                   <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                     <div>
                       <label className="block text-sm font-medium text-orange-700 mb-1">–î–ª–∏–Ω–∞ –∞–±–∑–∞—Ü–µ–≤</label>
                       <select
                         value={seoSettings.paragraphLength}
                         onChange={(e) => updateSeoSettings({paragraphLength: e.target.value})}
                         className="w-full px-3 py-2 border border-orange-300 rounded-md text-sm bg-white"
                       >
                         <option value="short">–ö–æ—Ä–æ—Ç–∫–∏–µ</option>
                         <option value="medium">–°—Ä–µ–¥–Ω–∏–µ</option>
                         <option value="long">–î–ª–∏–Ω–Ω—ã–µ</option>
                       </select>
                     </div>
                     <div className="flex items-center space-x-4">
                       <label className="flex items-center">
                         <input
                           type="checkbox"
                           checked={seoSettings.useLists}
                           onChange={(e) => updateSeoSettings({useLists: e.target.checked})}
                           className="mr-2"
                         />
                         <span className="text-sm font-medium text-orange-700">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–∏—Å–∫–∏</span>
                       </label>
                       <label className="flex items-center">
                         <input
                           type="checkbox"
                           checked={seoSettings.internalLinks}
                           onChange={(e) => updateSeoSettings({internalLinks: e.target.checked})}
                           className="mr-2"
                         />
                         <span className="text-sm font-medium text-orange-700">–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏</span>
                       </label>
                     </div>
                   </div>
                 </div>
               </>
             )}

             
          </div>
        )}

        {/* –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è */}
        {currentStep === 6 && finalArticle && (
          <div className="bg-white rounded-xl shadow-md p-6 mb-6">
            <h3 className="text-xl font-bold text-gray-800 mb-4">ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è</h3>
            
            {/* –ü–ª–∞–Ω —Å—Ç–∞—Ç—å–∏ */}
            {finalArticle.article_plan && (
              <div className="mb-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                <h4 className="text-lg font-semibold text-blue-800 mb-3">üìã –ü–ª–∞–Ω —Å—Ç–∞—Ç—å–∏</h4>
                <div className="space-y-3">
                  {finalArticle.article_plan.sections.map((section, index) => (
                    <div key={index} className="border border-blue-200 rounded p-3 bg-white">
                      <h5 className="font-semibold text-blue-700 mb-1">{section.title}</h5>
                      <p className="text-sm text-gray-600 mb-2">{section.description}</p>
                      {section.chunks && section.chunks.length > 0 && (
                        <div className="text-xs text-gray-500">
                          –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∏: {section.chunks.join(', ')}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
                <div className="mt-3 text-sm text-gray-600">
                  –í—Å–µ–≥–æ —Ä–∞–∑–¥–µ–ª–æ–≤: {finalArticle.article_plan.total_sections}
                </div>
              </div>
            )}
            
            {/* SEO –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              <div className="border border-gray-200 rounded-lg p-4">
                <h4 className="font-bold text-gray-800 mb-2">H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫</h4>
                <textarea
                  value={finalArticle.h1 || ''}
                  onChange={(e) => setFinalArticle(prev => ({ ...prev, h1: e.target.value }))}
                  className="w-full p-2 border border-gray-300 rounded text-gray-700 text-sm"
                  rows="2"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫"
                />
                <div className={`text-xs mt-1 ${(finalArticle.h1?.length || 0) > 255 ? 'text-red-500' : 'text-gray-500'}`}>
                  {finalArticle.h1?.length || 0}/255 —Å–∏–º–≤–æ–ª–æ–≤
                  {(finalArticle.h1?.length || 0) > 255 && ' ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ'}
                </div>
              </div>
              <div className="border border-gray-200 rounded-lg p-4">
                <h4 className="font-bold text-gray-800 mb-2">Title</h4>
                <textarea
                  value={finalArticle.title || ''}
                  onChange={(e) => setFinalArticle(prev => ({ ...prev, title: e.target.value }))}
                  className="w-full p-2 border border-gray-300 rounded text-gray-700 text-sm"
                  rows="2"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ Title"
                />
                <div className={`text-xs mt-1 ${(finalArticle.title?.length || 0) > 255 ? 'text-red-500' : 'text-gray-500'}`}>
                  {finalArticle.title?.length || 0}/255 —Å–∏–º–≤–æ–ª–æ–≤
                  {(finalArticle.title?.length || 0) > 255 && ' ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ'}
                </div>
              </div>
              <div className="border border-gray-200 rounded-lg p-4">
                <h4 className="font-bold text-gray-800 mb-2">Meta Description</h4>
                <textarea
                  value={finalArticle.meta_description || ''}
                  onChange={(e) => setFinalArticle(prev => ({ ...prev, meta_description: e.target.value }))}
                  className="w-full p-2 border border-gray-300 rounded text-gray-700 text-sm"
                  rows="3"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ Meta Description"
                />
                <div className={`text-xs mt-1 ${(finalArticle.meta_description?.length || 0) > 255 ? 'text-red-500' : 'text-gray-500'}`}>
                  {finalArticle.meta_description?.length || 0}/255 —Å–∏–º–≤–æ–ª–æ–≤
                  {(finalArticle.meta_description?.length || 0) > 255 && ' ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ'}
                </div>
              </div>
              <div className="border border-gray-200 rounded-lg p-4">
                <h4 className="font-bold text-gray-800 mb-2">Keywords</h4>
                <textarea
                  value={finalArticle.keywords || ''}
                  onChange={(e) => setFinalArticle(prev => ({ ...prev, keywords: e.target.value }))}
                  className="w-full p-2 border border-gray-300 rounded text-gray-700 text-sm"
                  rows="3"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ Keywords"
                />
                <div className={`text-xs mt-1 ${(finalArticle.keywords?.length || 0) > 255 ? 'text-red-500' : 'text-gray-500'}`}>
                  {finalArticle.keywords?.length || 0}/255 —Å–∏–º–≤–æ–ª–æ–≤
                  {(finalArticle.keywords?.length || 0) > 255 && ' ‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ'}
                </div>
              </div>
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            <div className="border border-gray-200 rounded-lg p-4">
              <h4 className="font-bold text-gray-800 mb-2">–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏</h4>
              <textarea
                value={finalArticle.content || ''}
                onChange={(e) => setFinalArticle(prev => ({ ...prev, content: e.target.value }))}
                className="w-full p-4 border border-gray-300 rounded text-gray-700 text-sm bg-gray-50"
                rows="15"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏"
              />
              <div className="text-xs text-gray-500 mt-1">
                {finalArticle.content?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="mt-4 flex gap-3">
              <button
                onClick={() => navigator.clipboard.writeText(finalArticle.content)}
                className="px-4 py-2 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 transition-colors"
              >
                üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
              </button>
              <button
                onClick={handleCheckSeoQuality}
                disabled={isCheckingSeo}
                className="px-4 py-2 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
              >
                {isCheckingSeo ? '‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º...' : 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å SEO-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—Å—Ç–∞'}
              </button>
              <button
                onClick={() => {
                  handleStepChange(1);
                  setSearchQuery("");
                  setSearchResults([]);
                  setSelectedResults(new Set());
                  setParsedData([]);
                   setParsingStats(null);
                  setCleanedData([]);
                  setChunks([]);
                  setFinalArticle(null);
                   setExpandedArticles(new Set());
                   setChunkPriorities({});
                   setExcludedChunks(new Set());
                   setArticlePlan(null);
                   setSeoQualityData(null);
                   setShowSeoBlock(false);
                   setSeoCheckError(null);
                   setCleaningSettings({
                      mode: 'automatic',
                      removeTechnicalBlocks: true,
                      removeDuplicates: true,
                      filterRelevance: true,
                      minParagraphLength: 50,
                      maxParagraphLength: 2000,
                      relevanceThreshold: 0.7
                    });
                    setEditableContent({});
                                       setOriginalContent({});
                   setModelSettings({
                     system_prompt: "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä-—Ä–µ—Ä–∞–π—Ç–µ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –µ–≥–æ —Å–º—ã—Å–ª –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ –∏–∑–º–µ–Ω–∏–≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ —Å—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è.\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n- –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ\n- –ò–∑–º–µ–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –∞–±–∑–∞—Ü–µ–≤\n- –ò—Å–ø–æ–ª—å–∑—É–π —Å–∏–Ω–æ–Ω–∏–º—ã –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏\n- –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –Ω–æ —á–∏—Ç–∞–µ–º—ã–º\n- –°–æ—Ö—Ä–∞–Ω–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω\n- –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ",
                     user_prompt: "–ü–µ—Ä–µ–ø–∏—à–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–≤ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–º—ã—Å–ª:",
                     temperature: 0.7,
                     max_tokens: 2000,
                     model: "gpt-4o",
                     // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ —Å—Ç–∞—Ç—å–∏
                     plan_temperature: 0.3,
                     plan_max_tokens: 1000,
                     plan_system_prompt: "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω —Å—Ç–∞—Ç—å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–ª–∞–Ω—É:\n- –õ–æ–≥–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ä–∞–∑–¥–µ–ª–æ–≤\n- –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞\n- –£–∫–∞–∑–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —á–∞–Ω–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞\n- –£—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏ —á–∞–Ω–∫–æ–≤ (high/medium/low)\n- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–º–µ –∏ —Å—Ç–∏–ª—é —Å—Ç–∞—Ç—å–∏",
                     plan_user_prompt: "–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ (—á–∞–Ω–∫–æ–≤) —Å–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω —Å—Ç–∞—Ç—å–∏. –£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∞–Ω–∫–∏ –±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã (–æ–Ω–∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ 'high').\n\n–ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:\n‚Äî –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤.\n‚Äî –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).\n‚Äî –£–∫–∞–∑–∞–Ω–∏–µ, –∫–∞–∫–∏–µ —á–∞–Ω–∫–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –∫–∞–∂–¥–æ–º—É —Ä–∞–∑–¥–µ–ª—É (–∏—Ö –Ω–æ–º–µ—Ä–∞).\n\n–î–∞–Ω–Ω—ã–µ:\n{chunks_with_priority}\n–¢–µ–º–∞ —Å—Ç–∞—Ç—å–∏: {theme}.\n–°—Ç–∏–ª—å: {style}.\n\n–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n{\n  \"sections\": [\n    {\n      \"title\": \"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞\",\n      \"description\": \"–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞\",\n      \"chunks\": [1, 3, 5]\n    }\n  ],\n  \"total_sections\": 3\n}"
                   });
                   setChunkPriorities({});
                   setExcludedChunks(new Set());
                   setArticlePlan(null);
                  setError("");
                }}
                className="px-4 py-2 bg-gray-600 text-white font-medium rounded-lg hover:bg-gray-700 transition-colors"
              >
                üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫
              </button>
            </div>

            {/* –ë–ª–æ–∫ SEO-–ø—Ä–æ–≤–µ—Ä–∫–∏ */}
            {showSeoBlock && (
              <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                <h4 className="text-lg font-semibold text-blue-800 mb-4">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã SEO-–ø—Ä–æ–≤–µ—Ä–∫–∏</h4>
                
                {isCheckingSeo && (
                  <div className="flex items-center justify-center py-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                    <span className="ml-3 text-blue-600 font-medium">–ü—Ä–æ–≤–µ—Ä—è–µ–º SEO-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã...</span>
                  </div>
                )}

                {seoCheckError && (
                  <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
                    <div className="flex items-center">
                      <span className="text-red-600 text-lg mr-2">‚ùå</span>
                      <span className="text-red-700 font-medium">{seoCheckError}</span>
                    </div>
                  </div>
                )}

                {seoQualityData && !isCheckingSeo && !seoCheckError && (
                  <div className="space-y-4">
                    {/* –ú–µ—Ç—Ä–∏–∫–∏ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö */}
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                      <div className="bg-white p-3 rounded-lg border border-gray-200 text-center">
                        <div className="text-2xl font-bold text-green-600 mb-1">
                          {seoQualityData.metrics?.uniqueness || 0}%
                        </div>
                        <div className="text-xs text-gray-600">–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å</div>
                        <div className="text-xs mt-1">
                          {seoQualityData.metrics?.uniqueness >= 80 ? 'üü¢' : 
                           seoQualityData.metrics?.uniqueness >= 60 ? 'üü°' : 'üî¥'}
                        </div>
                      </div>
                      
                      <div className="bg-white p-3 rounded-lg border border-gray-200 text-center">
                        <div className="text-2xl font-bold text-blue-600 mb-1">
                          {seoQualityData.metrics?.water_percent || 0}%
                        </div>
                        <div className="text-xs text-gray-600">–í–æ–¥–Ω–æ—Å—Ç—å</div>
                        <div className="text-xs mt-1">
                          {seoQualityData.metrics?.water_percent <= 15 ? 'üü¢' : 
                           seoQualityData.metrics?.water_percent <= 30 ? 'üü°' : 'üî¥'}
                        </div>
                      </div>
                      
                      <div className="bg-white p-3 rounded-lg border border-gray-200 text-center">
                        <div className="text-2xl font-bold text-purple-600 mb-1">
                          {seoQualityData.metrics?.spam_percent || 0}%
                        </div>
                        <div className="text-xs text-gray-600">–°–ø–∞–º</div>
                        <div className="text-xs mt-1">
                          {seoQualityData.metrics?.spam_percent <= 5 ? 'üü¢' : 
                           seoQualityData.metrics?.spam_percent <= 15 ? 'üü°' : 'üî¥'}
                        </div>
                      </div>
                      
                      <div className="bg-white p-3 rounded-lg border border-gray-200 text-center">
                        <div className="text-2xl font-bold text-orange-600 mb-1">
                          {seoQualityData.metrics?.spell_errors?.length || 0}
                        </div>
                        <div className="text-xs text-gray-600">–û—à–∏–±–∫–∏</div>
                        <div className="text-xs mt-1">
                          {(seoQualityData.metrics?.spell_errors?.length || 0) === 0 ? 'üü¢' : 'üî¥'}
                        </div>
                      </div>
                    </div>

                    {/* –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ */}
                    {seoQualityData.keywords && seoQualityData.keywords.length > 0 && (
                      <div className="bg-white p-4 rounded-lg border border-gray-200">
                        <h5 className="font-semibold text-gray-800 mb-2">üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</h5>
                        <div className="flex flex-wrap gap-2">
                          {seoQualityData.keywords.slice(0, 7).map((keywordObj, index) => (
                            <span 
                              key={index}
                              className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full"
                            >
                              {keywordObj.keyword} ({keywordObj.count})
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            )}

            {/* –¢–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö */}
            <div className="mt-6">
              <div className="text-xl font-bold text-gray-800 mb-4">–¢–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</div>
              {themes.length > 0 && (
                <div className="grid grid-cols-2 md:grid-cols-4 gap-1">
                  {themes.map(theme => (
                    <button
                      key={theme.id}
                      type="button"
                      onClick={() => {
                        if (themeIds.includes(theme.id)) {
                          setThemeIds(themeIds.filter(id => id !== theme.id));
                        } else {
                          setThemeIds([...themeIds, theme.id]);
                        }
                      }}
                      className={`
                        relative px-3 py-2 text-xs font-medium rounded-lg border transition-all duration-200 text-left cursor-pointer
                        ${themeIds.includes(theme.id)
                          ? 'bg-green-500 text-white border-green-500 shadow-md transform scale-105' 
                          : 'bg-white text-gray-700 border-gray-200 hover:border-green-400 hover:bg-green-50'
                        }
                      `}
                    >
                      <div className="truncate leading-tight">{theme.name}</div>
                      {themeIds.includes(theme.id) && (
                        <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full border-2 border-white"></div>
                      )}
                    </button>
                  ))}
                </div>
              )}
              {themeIds.length > 0 && (
                <div className="mt-3 text-xs text-green-600 font-medium bg-green-50 p-2 rounded-lg border border-green-200">
                  <div className="flex items-center gap-2">
                    <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                    <span>–í—ã–±—Ä–∞–Ω–æ —Ç–µ–º–∞—Ç–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: <strong>{themeIds.length}</strong></span>
                  </div>
                  <div className="mt-1 text-gray-600">
                    {themes.filter(t => themeIds.includes(t.id)).map(t => t.name).join(', ')}
                  </div>
                </div>
              )}
              
              {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö */}
              <div className="mt-4">
                <button
                  className="px-8 py-3 rounded-xl bg-yellow-400 text-white font-bold text-lg hover:bg-yellow-500 transition-all duration-200 shadow-md disabled:bg-gray-400 disabled:cursor-not-allowed"
                  onClick={handleSaveToDatabase}
                  disabled={savingToDb}
                >
                  {savingToDb ? 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É'}
                </button>
                {((finalArticle.title?.length || 0) > 255 || 
                  (finalArticle.h1?.length || 0) > 255 || 
                  (finalArticle.meta_description?.length || 0) > 255 || 
                  (finalArticle.keywords?.length || 0) > 255) && (
                  <div className="text-xs text-red-600 mt-2 p-2 bg-red-50 border border-red-200 rounded">
                    ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –ø—Ä–µ–≤—ã—à–∞—é—Ç 255 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –±—É–¥—É—Ç –æ–±—Ä–µ–∑–∞–Ω—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
        {!loading && searchResults.length === 0 && !error && searchQuery && (
          <div className="bg-white rounded-xl shadow-md p-6 text-center">
            <div className="text-gray-400 mb-4">
              <svg className="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <h3 className="text-lg font-medium text-gray-500 mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p className="text-gray-400 text-sm">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å</p>
          </div>
        )}
        </div>
      </div>
      
      {/* Toast-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      {toast && <Toast {...toast} onClose={() => setToast(null)} />}
    </div>
  );
};

export default SeoSearchPage;