import React, { useState, useEffect } from "react";

const GptSettings = () => {
  const [themes, setThemes] = useState([]);
  const [selectedTheme, setSelectedTheme] = useState(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã GPT –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã
  const [gptSettings, setGptSettings] = useState({
    system_prompt: "",
    user_prompt: "",
    temperature: 0.3,
    max_tokens: 1000
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–º
  const fetchThemes = async () => {
    try {
      setLoading(true);
      const response = await fetch("/api/themes");
      if (response.ok) {
        const data = await response.json();
        setThemes(data);
        if (data.length > 0) {
          setSelectedTheme(data[0]);
          loadGptSettingsForTheme(data[0].id);
        }
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º:", error);
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ GPT –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
  const loadGptSettingsForTheme = async (themeId) => {
    try {
      const response = await fetch(`/api/themes/${themeId}/gpt`);
      
      if (response.ok) {
        const data = await response.json();
        setGptSettings({
          system_prompt: data.system_prompt,
          user_prompt: data.user_prompt,
          temperature: data.temperature,
          max_tokens: data.max_tokens
        });
      } else {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GPT –Ω–∞—Å—Ç—Ä–æ–µ–∫:", response.status);
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        setGptSettings({
          system_prompt: `–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä-—Ä–µ—Ä–∞–π—Ç–µ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –µ–≥–æ —Å–º—ã—Å–ª –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–æ –∏–∑–º–µ–Ω–∏–≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ —Å—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏ –¥–∞–Ω–Ω—ã–µ
- –ò–∑–º–µ–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –∞–±–∑–∞—Ü–µ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–∏–Ω–æ–Ω–∏–º—ã –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
- –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –Ω–æ —á–∏—Ç–∞–µ–º—ã–º
- –°–æ—Ö—Ä–∞–Ω–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ`,
          user_prompt: "–ü–µ—Ä–µ–ø–∏—à–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, —Å–¥–µ–ª–∞–≤ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–º—ã—Å–ª:",
          temperature: 0.3,
          max_tokens: 1000
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ GPT:", error);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ GPT
  const handleSaveSettings = async (e) => {
    e.preventDefault();
    if (!selectedTheme) return;

    try {
      setSaving(true);
      const token = localStorage.getItem("token");
      
      const response = await fetch(`/api/themes/${selectedTheme.id}/gpt`, {
        method: "PUT",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(gptSettings)
      });

      if (response.ok) {
        const result = await response.json();
        alert("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ GPT —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!");
      } else {
        const error = await response.json();
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", error);
        alert(error.error || "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:", error);
      alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫");
    } finally {
      setSaving(false);
    }
  };

  // –°–º–µ–Ω–∞ —Ç–µ–º—ã
  const handleThemeChange = (theme) => {
    setSelectedTheme(theme);
    loadGptSettingsForTheme(theme.id);
  };

  useEffect(() => {
    fetchThemes();
  }, []);

  if (loading) {
    return (
      <div className="text-center py-12">
        <div className="text-lg text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ GPT...</div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div>
        <h2 className="text-2xl font-bold text-gray-800 mb-2">–ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPT –º–æ–¥–µ–ª–∏</h2>
        <p className="text-gray-600">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ò–ò –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–∞–º</p>
      </div>

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º–∞—Ç–∏–∫ */}
      <div className="bg-gray-50 p-4 rounded-lg">
        <h3 className="text-lg font-semibold text-gray-800 mb-3">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É</h3>
        <div className="grid grid-cols-3 md:grid-cols-6 gap-2">
          {themes.map((theme) => (
            <button
              key={theme.id}
              onClick={() => handleThemeChange(theme)}
              className={`px-3 py-2 rounded-lg border transition-all duration-200 text-sm ${
                selectedTheme?.id === theme.id
                  ? "border-primary bg-primary text-white shadow-md"
                  : "border-gray-300 bg-white text-gray-700 hover:border-primary hover:bg-gray-50"
              }`}
            >
              <div className="font-medium truncate">{theme.name}</div>
              <div className="text-xs opacity-75">{theme.count || 0}</div>
            </button>
          ))}
        </div>
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ */}
      {selectedTheme && (
        <form onSubmit={handleSaveSettings} className="space-y-6">
          <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
            <div className="flex items-center">
              <div className="text-blue-500 mr-3 text-xl">ü§ñ</div>
              <div>
                <h4 className="font-semibold text-blue-800">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏: {selectedTheme.name}</h4>
                <p className="text-blue-600 text-sm">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ —Ç–µ–∫—Å—Ç–∞–º –¥–∞–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏</p>
              </div>
            </div>
          </div>

          {/* System Prompt */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (System Prompt)
            </label>
            <textarea
              value={gptSettings.system_prompt}
              onChange={(e) => setGptSettings({ ...gptSettings, system_prompt: e.target.value })}
              className="w-full h-32 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent resize-none text-sm"
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ò–ò..."
            />
            <p className="text-xs text-gray-500 mt-1">
              –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–µ —Ä–æ–ª—å –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ò–ò
            </p>
          </div>

          {/* User Prompt */}
          <div>
            <label className="block text-sm font-semibold text-gray-700 mb-2">
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç (User Prompt)
            </label>
            <textarea
              value={gptSettings.user_prompt}
              onChange={(e) => setGptSettings({ ...gptSettings, user_prompt: e.target.value })}
              className="w-full h-20 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent resize-none text-sm"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞..."
            />
            <p className="text-xs text-gray-500 mt-1">
              –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ–∫—Å—Ç–æ–º
            </p>
          </div>

          {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Temperature */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (Temperature)
                <span className="ml-2 px-2 py-1 bg-gray-100 text-gray-600 rounded text-xs font-normal">
                  {gptSettings.temperature}
                </span>
              </label>
              <div className="space-y-2">
                <input
                  type="range"
                  min="0"
                  max="1"
                  step="0.1"
                  value={gptSettings.temperature}
                  onChange={(e) => setGptSettings({ ...gptSettings, temperature: parseFloat(e.target.value) })}
                  className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                />
                <div className="flex justify-between text-xs text-gray-500">
                  <span>0.0</span>
                  <span>0.5</span>
                  <span>1.0</span>
                </div>
              </div>
              <p className="text-xs text-gray-500 mt-1">
                –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
              </p>
            </div>

            {/* Max Tokens */}
            <div>
              <label className="block text-sm font-semibold text-gray-700 mb-2">
                –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤ (Max Tokens)
                <span className="ml-2 px-2 py-1 bg-gray-100 text-gray-600 rounded text-xs font-normal">
                  {gptSettings.max_tokens}
                </span>
              </label>
              <div className="space-y-2">
                <input
                  type="range"
                  min="300"
                  max="1500"
                  step="50"
                  value={gptSettings.max_tokens}
                  onChange={(e) => setGptSettings({ ...gptSettings, max_tokens: parseInt(e.target.value) })}
                  className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
                />
                <div className="flex justify-between text-xs text-gray-500">
                  <span>300</span>
                  <span>900</span>
                  <span>1500</span>
                </div>
              </div>
              <p className="text-xs text-gray-500 mt-1">
                –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞–Ω–∫–∞ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
              </p>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex gap-3 pt-4 border-t">
            <button
              type="submit"
              disabled={saving}
              className="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 disabled:opacity-50 transition-colors flex items-center text-sm"
            >
              {saving ? (
                <>
                  <div className="animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2"></div>
                  –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                </>
              ) : (
                <>
                  <span className="mr-2">üíæ</span>
                  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </>
              )}
            </button>
            
            <button
              type="button"
              onClick={() => loadGptSettingsForTheme(selectedTheme.id)}
              className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors text-sm"
            >
              üîÑ –°–±—Ä–æ—Å–∏—Ç—å
            </button>
          </div>
        </form>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ */}
      <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
        <div className="flex items-start">
          <div className="text-yellow-500 mr-3 text-xl">üí°</div>
          <div>
            <h4 className="font-semibold text-yellow-800 mb-2">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ</h4>
            <ul className="text-yellow-700 text-sm space-y-1">
              <li>‚Ä¢ <strong>Temperature 0.1-0.3:</strong> –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏ —Ç–æ—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤</li>
              <li>‚Ä¢ <strong>Temperature 0.5-0.8:</strong> –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</li>
              <li>‚Ä¢ <strong>Max Tokens:</strong> —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 1 —Ç–æ–∫–µ–Ω = 0.75 —Å–ª–æ–≤–∞)</li>
              <li>‚Ä¢ <strong>System Prompt:</strong> –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–æ–ª—å –ò–ò (–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, —Ä–µ–¥–∞–∫—Ç–æ—Ä, SEO-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default GptSettings;